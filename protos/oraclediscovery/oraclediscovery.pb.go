//
//Copyright 2024 Google LLC
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//https://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.23.4
// source: protos/oraclediscovery/oraclediscovery.proto

package oraclediscovery

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Discovery_Database_DatabaseRole int32

const (
	Discovery_Database_DATABASE_ROLE_UNKNOWN          Discovery_Database_DatabaseRole = 0
	Discovery_Database_DATABASE_ROLE_PRIMARY          Discovery_Database_DatabaseRole = 1
	Discovery_Database_DATABASE_ROLE_SNAPSHOT_STANDBY Discovery_Database_DatabaseRole = 2
	Discovery_Database_DATABASE_ROLE_LOGICAL_STANDBY  Discovery_Database_DatabaseRole = 3
	Discovery_Database_DATABASE_ROLE_PHYSICAL_STANDBY Discovery_Database_DatabaseRole = 4
	Discovery_Database_DATABASE_ROLE_FAR_SYNC         Discovery_Database_DatabaseRole = 5
)

// Enum value maps for Discovery_Database_DatabaseRole.
var (
	Discovery_Database_DatabaseRole_name = map[int32]string{
		0: "DATABASE_ROLE_UNKNOWN",
		1: "DATABASE_ROLE_PRIMARY",
		2: "DATABASE_ROLE_SNAPSHOT_STANDBY",
		3: "DATABASE_ROLE_LOGICAL_STANDBY",
		4: "DATABASE_ROLE_PHYSICAL_STANDBY",
		5: "DATABASE_ROLE_FAR_SYNC",
	}
	Discovery_Database_DatabaseRole_value = map[string]int32{
		"DATABASE_ROLE_UNKNOWN":          0,
		"DATABASE_ROLE_PRIMARY":          1,
		"DATABASE_ROLE_SNAPSHOT_STANDBY": 2,
		"DATABASE_ROLE_LOGICAL_STANDBY":  3,
		"DATABASE_ROLE_PHYSICAL_STANDBY": 4,
		"DATABASE_ROLE_FAR_SYNC":         5,
	}
)

func (x Discovery_Database_DatabaseRole) Enum() *Discovery_Database_DatabaseRole {
	p := new(Discovery_Database_DatabaseRole)
	*p = x
	return p
}

func (x Discovery_Database_DatabaseRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Discovery_Database_DatabaseRole) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_oraclediscovery_oraclediscovery_proto_enumTypes[0].Descriptor()
}

func (Discovery_Database_DatabaseRole) Type() protoreflect.EnumType {
	return &file_protos_oraclediscovery_oraclediscovery_proto_enumTypes[0]
}

func (x Discovery_Database_DatabaseRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Discovery_Database_DatabaseRole.Descriptor instead.
func (Discovery_Database_DatabaseRole) EnumDescriptor() ([]byte, []int) {
	return file_protos_oraclediscovery_oraclediscovery_proto_rawDescGZIP(), []int{0, 2, 0}
}

type Discovery_Database_Instance_DatabaseEdition int32

const (
	Discovery_Database_Instance_DATABASE_EDITION_UNKNOWN Discovery_Database_Instance_DatabaseEdition = 0
	Discovery_Database_Instance_DATABASE_EDITION_CORE_EE Discovery_Database_Instance_DatabaseEdition = 1
	Discovery_Database_Instance_DATABASE_EDITION_EE      Discovery_Database_Instance_DatabaseEdition = 2
	Discovery_Database_Instance_DATABASE_EDITION_PO      Discovery_Database_Instance_DatabaseEdition = 3
	Discovery_Database_Instance_DATABASE_EDITION_SE      Discovery_Database_Instance_DatabaseEdition = 4
	Discovery_Database_Instance_DATABASE_EDITION_SE2     Discovery_Database_Instance_DatabaseEdition = 5
	Discovery_Database_Instance_DATABASE_EDITION_XE      Discovery_Database_Instance_DatabaseEdition = 6
)

// Enum value maps for Discovery_Database_Instance_DatabaseEdition.
var (
	Discovery_Database_Instance_DatabaseEdition_name = map[int32]string{
		0: "DATABASE_EDITION_UNKNOWN",
		1: "DATABASE_EDITION_CORE_EE",
		2: "DATABASE_EDITION_EE",
		3: "DATABASE_EDITION_PO",
		4: "DATABASE_EDITION_SE",
		5: "DATABASE_EDITION_SE2",
		6: "DATABASE_EDITION_XE",
	}
	Discovery_Database_Instance_DatabaseEdition_value = map[string]int32{
		"DATABASE_EDITION_UNKNOWN": 0,
		"DATABASE_EDITION_CORE_EE": 1,
		"DATABASE_EDITION_EE":      2,
		"DATABASE_EDITION_PO":      3,
		"DATABASE_EDITION_SE":      4,
		"DATABASE_EDITION_SE2":     5,
		"DATABASE_EDITION_XE":      6,
	}
)

func (x Discovery_Database_Instance_DatabaseEdition) Enum() *Discovery_Database_Instance_DatabaseEdition {
	p := new(Discovery_Database_Instance_DatabaseEdition)
	*p = x
	return p
}

func (x Discovery_Database_Instance_DatabaseEdition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Discovery_Database_Instance_DatabaseEdition) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_oraclediscovery_oraclediscovery_proto_enumTypes[1].Descriptor()
}

func (Discovery_Database_Instance_DatabaseEdition) Type() protoreflect.EnumType {
	return &file_protos_oraclediscovery_oraclediscovery_proto_enumTypes[1]
}

func (x Discovery_Database_Instance_DatabaseEdition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Discovery_Database_Instance_DatabaseEdition.Descriptor instead.
func (Discovery_Database_Instance_DatabaseEdition) EnumDescriptor() ([]byte, []int) {
	return file_protos_oraclediscovery_oraclediscovery_proto_rawDescGZIP(), []int{0, 2, 0, 0}
}

// DATABASE_TYPE from V$INSTANCE
type Discovery_Database_Instance_DatabaseType int32

const (
	// Database type can't be determined.
	Discovery_Database_Instance_DATABASE_TYPE_UNKNOWN Discovery_Database_Instance_DatabaseType = 0
	// Regular Oracle RAC database with possibly multiple instances.
	Discovery_Database_Instance_DATABASE_TYPE_RAC Discovery_Database_Instance_DatabaseType = 1
	// Oracle RAC One Node mode, allows only one instance to run at a time.
	Discovery_Database_Instance_DATABASE_TYPE_RAC_ONE_NODE Discovery_Database_Instance_DatabaseType = 2
	// Database is running as a single instance.
	Discovery_Database_Instance_DATABASE_TYPE_SINGLE Discovery_Database_Instance_DatabaseType = 3
)

// Enum value maps for Discovery_Database_Instance_DatabaseType.
var (
	Discovery_Database_Instance_DatabaseType_name = map[int32]string{
		0: "DATABASE_TYPE_UNKNOWN",
		1: "DATABASE_TYPE_RAC",
		2: "DATABASE_TYPE_RAC_ONE_NODE",
		3: "DATABASE_TYPE_SINGLE",
	}
	Discovery_Database_Instance_DatabaseType_value = map[string]int32{
		"DATABASE_TYPE_UNKNOWN":      0,
		"DATABASE_TYPE_RAC":          1,
		"DATABASE_TYPE_RAC_ONE_NODE": 2,
		"DATABASE_TYPE_SINGLE":       3,
	}
)

func (x Discovery_Database_Instance_DatabaseType) Enum() *Discovery_Database_Instance_DatabaseType {
	p := new(Discovery_Database_Instance_DatabaseType)
	*p = x
	return p
}

func (x Discovery_Database_Instance_DatabaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Discovery_Database_Instance_DatabaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_oraclediscovery_oraclediscovery_proto_enumTypes[2].Descriptor()
}

func (Discovery_Database_Instance_DatabaseType) Type() protoreflect.EnumType {
	return &file_protos_oraclediscovery_oraclediscovery_proto_enumTypes[2]
}

func (x Discovery_Database_Instance_DatabaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Discovery_Database_Instance_DatabaseType.Descriptor instead.
func (Discovery_Database_Instance_DatabaseType) EnumDescriptor() ([]byte, []int) {
	return file_protos_oraclediscovery_oraclediscovery_proto_rawDescGZIP(), []int{0, 2, 0, 1}
}

// The state of the handler.
type Discovery_Listener_Service_DatabaseInstance_Handler_State int32

const (
	Discovery_Listener_Service_DatabaseInstance_Handler_STATE_UNKNOWN Discovery_Listener_Service_DatabaseInstance_Handler_State = 0
	// the service handler can accept new connections.
	Discovery_Listener_Service_DatabaseInstance_Handler_STATE_READY Discovery_Listener_Service_DatabaseInstance_Handler_State = 1
	// the service handler cannot accept new connections.
	Discovery_Listener_Service_DatabaseInstance_Handler_STATE_BLOCKED Discovery_Listener_Service_DatabaseInstance_Handler_State = 2
)

// Enum value maps for Discovery_Listener_Service_DatabaseInstance_Handler_State.
var (
	Discovery_Listener_Service_DatabaseInstance_Handler_State_name = map[int32]string{
		0: "STATE_UNKNOWN",
		1: "STATE_READY",
		2: "STATE_BLOCKED",
	}
	Discovery_Listener_Service_DatabaseInstance_Handler_State_value = map[string]int32{
		"STATE_UNKNOWN": 0,
		"STATE_READY":   1,
		"STATE_BLOCKED": 2,
	}
)

func (x Discovery_Listener_Service_DatabaseInstance_Handler_State) Enum() *Discovery_Listener_Service_DatabaseInstance_Handler_State {
	p := new(Discovery_Listener_Service_DatabaseInstance_Handler_State)
	*p = x
	return p
}

func (x Discovery_Listener_Service_DatabaseInstance_Handler_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Discovery_Listener_Service_DatabaseInstance_Handler_State) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_oraclediscovery_oraclediscovery_proto_enumTypes[3].Descriptor()
}

func (Discovery_Listener_Service_DatabaseInstance_Handler_State) Type() protoreflect.EnumType {
	return &file_protos_oraclediscovery_oraclediscovery_proto_enumTypes[3]
}

func (x Discovery_Listener_Service_DatabaseInstance_Handler_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Discovery_Listener_Service_DatabaseInstance_Handler_State.Descriptor instead.
func (Discovery_Listener_Service_DatabaseInstance_Handler_State) EnumDescriptor() ([]byte, []int) {
	return file_protos_oraclediscovery_oraclediscovery_proto_rawDescGZIP(), []int{0, 3, 1, 0, 0, 0}
}

// The schema for Oracle discovery data.
type Discovery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of discovered databases; each can be a CDB or a non-CDB.
	Databases []*Discovery_DatabaseRoot `protobuf:"bytes,1,rep,name=databases,proto3" json:"databases,omitempty"`
	// The timestamp when the last modified.
	LastUpdated *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	Listeners   []*Discovery_Listener  `protobuf:"bytes,3,rep,name=listeners,proto3" json:"listeners,omitempty"`
	Host        *Discovery_Host        `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *Discovery) Reset() {
	*x = Discovery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Discovery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Discovery) ProtoMessage() {}

func (x *Discovery) ProtoReflect() protoreflect.Message {
	mi := &file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Discovery.ProtoReflect.Descriptor instead.
func (*Discovery) Descriptor() ([]byte, []int) {
	return file_protos_oraclediscovery_oraclediscovery_proto_rawDescGZIP(), []int{0}
}

func (x *Discovery) GetDatabases() []*Discovery_DatabaseRoot {
	if x != nil {
		return x.Databases
	}
	return nil
}

func (x *Discovery) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *Discovery) GetListeners() []*Discovery_Listener {
	if x != nil {
		return x.Listeners
	}
	return nil
}

func (x *Discovery) GetHost() *Discovery_Host {
	if x != nil {
		return x.Host
	}
	return nil
}

type Discovery_DatabaseRoot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TenancyType:
	//
	//	*Discovery_DatabaseRoot_Db
	//	*Discovery_DatabaseRoot_Cdb
	TenancyType isDiscovery_DatabaseRoot_TenancyType `protobuf_oneof:"tenancy_type"`
}

func (x *Discovery_DatabaseRoot) Reset() {
	*x = Discovery_DatabaseRoot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Discovery_DatabaseRoot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Discovery_DatabaseRoot) ProtoMessage() {}

func (x *Discovery_DatabaseRoot) ProtoReflect() protoreflect.Message {
	mi := &file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Discovery_DatabaseRoot.ProtoReflect.Descriptor instead.
func (*Discovery_DatabaseRoot) Descriptor() ([]byte, []int) {
	return file_protos_oraclediscovery_oraclediscovery_proto_rawDescGZIP(), []int{0, 0}
}

func (m *Discovery_DatabaseRoot) GetTenancyType() isDiscovery_DatabaseRoot_TenancyType {
	if m != nil {
		return m.TenancyType
	}
	return nil
}

func (x *Discovery_DatabaseRoot) GetDb() *Discovery_Database {
	if x, ok := x.GetTenancyType().(*Discovery_DatabaseRoot_Db); ok {
		return x.Db
	}
	return nil
}

func (x *Discovery_DatabaseRoot) GetCdb() *Discovery_DatabaseRoot_ContainerDatabase {
	if x, ok := x.GetTenancyType().(*Discovery_DatabaseRoot_Cdb); ok {
		return x.Cdb
	}
	return nil
}

type isDiscovery_DatabaseRoot_TenancyType interface {
	isDiscovery_DatabaseRoot_TenancyType()
}

type Discovery_DatabaseRoot_Db struct {
	Db *Discovery_Database `protobuf:"bytes,1,opt,name=db,proto3,oneof"` // Represents a non-CDB
}

type Discovery_DatabaseRoot_Cdb struct {
	Cdb *Discovery_DatabaseRoot_ContainerDatabase `protobuf:"bytes,2,opt,name=cdb,proto3,oneof"` // Represents a CDB
}

func (*Discovery_DatabaseRoot_Db) isDiscovery_DatabaseRoot_TenancyType() {}

func (*Discovery_DatabaseRoot_Cdb) isDiscovery_DatabaseRoot_TenancyType() {}

// A compute host where discovery runs.
type Discovery_Host struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to HostType:
	//
	//	*Discovery_Host_Vm
	HostType isDiscovery_Host_HostType `protobuf_oneof:"host_type"`
	// Hostname returned by the operating system
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (x *Discovery_Host) Reset() {
	*x = Discovery_Host{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Discovery_Host) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Discovery_Host) ProtoMessage() {}

func (x *Discovery_Host) ProtoReflect() protoreflect.Message {
	mi := &file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Discovery_Host.ProtoReflect.Descriptor instead.
func (*Discovery_Host) Descriptor() ([]byte, []int) {
	return file_protos_oraclediscovery_oraclediscovery_proto_rawDescGZIP(), []int{0, 1}
}

func (m *Discovery_Host) GetHostType() isDiscovery_Host_HostType {
	if m != nil {
		return m.HostType
	}
	return nil
}

func (x *Discovery_Host) GetVm() *Discovery_Host_GcpVirtualMachine {
	if x, ok := x.GetHostType().(*Discovery_Host_Vm); ok {
		return x.Vm
	}
	return nil
}

func (x *Discovery_Host) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

type isDiscovery_Host_HostType interface {
	isDiscovery_Host_HostType()
}

type Discovery_Host_Vm struct {
	Vm *Discovery_Host_GcpVirtualMachine `protobuf:"bytes,1,opt,name=vm,proto3,oneof"`
}

func (*Discovery_Host_Vm) isDiscovery_Host_HostType() {}

type Discovery_Database struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dbid         int64  `protobuf:"varint,1,opt,name=dbid,proto3" json:"dbid,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DbUniqueName string `protobuf:"bytes,3,opt,name=db_unique_name,json=dbUniqueName,proto3" json:"db_unique_name,omitempty"`
	// guid is only set for pluggable databases.
	Guid         string                          `protobuf:"bytes,4,opt,name=guid,proto3" json:"guid,omitempty"`
	ConId        int64                           `protobuf:"varint,5,opt,name=con_id,json=conId,proto3" json:"con_id,omitempty"`
	Created      *timestamppb.Timestamp          `protobuf:"bytes,7,opt,name=created,proto3" json:"created,omitempty"`
	DatabaseRole Discovery_Database_DatabaseRole `protobuf:"varint,8,opt,name=database_role,json=databaseRole,proto3,enum=workloadagent.protos.oraclediscovery.Discovery_Database_DatabaseRole" json:"database_role,omitempty"`
	// db_unique_name of the parent database, from v$dataguard_config.
	// The field is used to track parent-child relationship between primary and
	// standby instances. Populated for the standby instances only.
	ParentDbUniqueName string `protobuf:"bytes,9,opt,name=parent_db_unique_name,json=parentDbUniqueName,proto3" json:"parent_db_unique_name,omitempty"`
	// List of Oracle instances associated with the database
	Instances []*Discovery_Database_Instance `protobuf:"bytes,10,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (x *Discovery_Database) Reset() {
	*x = Discovery_Database{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Discovery_Database) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Discovery_Database) ProtoMessage() {}

func (x *Discovery_Database) ProtoReflect() protoreflect.Message {
	mi := &file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Discovery_Database.ProtoReflect.Descriptor instead.
func (*Discovery_Database) Descriptor() ([]byte, []int) {
	return file_protos_oraclediscovery_oraclediscovery_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Discovery_Database) GetDbid() int64 {
	if x != nil {
		return x.Dbid
	}
	return 0
}

func (x *Discovery_Database) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Discovery_Database) GetDbUniqueName() string {
	if x != nil {
		return x.DbUniqueName
	}
	return ""
}

func (x *Discovery_Database) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

func (x *Discovery_Database) GetConId() int64 {
	if x != nil {
		return x.ConId
	}
	return 0
}

func (x *Discovery_Database) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Discovery_Database) GetDatabaseRole() Discovery_Database_DatabaseRole {
	if x != nil {
		return x.DatabaseRole
	}
	return Discovery_Database_DATABASE_ROLE_UNKNOWN
}

func (x *Discovery_Database) GetParentDbUniqueName() string {
	if x != nil {
		return x.ParentDbUniqueName
	}
	return ""
}

func (x *Discovery_Database) GetInstances() []*Discovery_Database_Instance {
	if x != nil {
		return x.Instances
	}
	return nil
}

// Oracle Net Listener configuration.
type Discovery_Listener struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id uniquely identifies the listener on the machine.
	Id            *Discovery_Listener_ListenerId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StartTime     *timestamppb.Timestamp         `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Security      string                         `protobuf:"bytes,4,opt,name=security,proto3" json:"security,omitempty"`                                // E.g., "OFF"
	TraceLevel    string                         `protobuf:"bytes,5,opt,name=trace_level,json=traceLevel,proto3" json:"trace_level,omitempty"`          // E.g., "support"
	ParameterFile string                         `protobuf:"bytes,6,opt,name=parameter_file,json=parameterFile,proto3" json:"parameter_file,omitempty"` // E.g., "/oracle/admin/listener.ora"
	LogFile       string                         `protobuf:"bytes,7,opt,name=log_file,json=logFile,proto3" json:"log_file,omitempty"`                   // E.g., "/oracle/network/log/listener.log"
	TraceFile     string                         `protobuf:"bytes,8,opt,name=trace_file,json=traceFile,proto3" json:"trace_file,omitempty"`             // E.g., "/oracle/network/trace/listener.trc"
	Services      []*Discovery_Listener_Service  `protobuf:"bytes,9,rep,name=services,proto3" json:"services,omitempty"`
	Endpoints     []*Discovery_Listener_Endpoint `protobuf:"bytes,10,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
}

func (x *Discovery_Listener) Reset() {
	*x = Discovery_Listener{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Discovery_Listener) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Discovery_Listener) ProtoMessage() {}

func (x *Discovery_Listener) ProtoReflect() protoreflect.Message {
	mi := &file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Discovery_Listener.ProtoReflect.Descriptor instead.
func (*Discovery_Listener) Descriptor() ([]byte, []int) {
	return file_protos_oraclediscovery_oraclediscovery_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Discovery_Listener) GetId() *Discovery_Listener_ListenerId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Discovery_Listener) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Discovery_Listener) GetSecurity() string {
	if x != nil {
		return x.Security
	}
	return ""
}

func (x *Discovery_Listener) GetTraceLevel() string {
	if x != nil {
		return x.TraceLevel
	}
	return ""
}

func (x *Discovery_Listener) GetParameterFile() string {
	if x != nil {
		return x.ParameterFile
	}
	return ""
}

func (x *Discovery_Listener) GetLogFile() string {
	if x != nil {
		return x.LogFile
	}
	return ""
}

func (x *Discovery_Listener) GetTraceFile() string {
	if x != nil {
		return x.TraceFile
	}
	return ""
}

func (x *Discovery_Listener) GetServices() []*Discovery_Listener_Service {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *Discovery_Listener) GetEndpoints() []*Discovery_Listener_Endpoint {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

// Represents a Multitenant container database (CDB) which hosts multiple
// pluggable databases (PDBs)
type Discovery_DatabaseRoot_ContainerDatabase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The root database for the CDB
	Root *Discovery_Database `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	// The pluggable databases within the CDB
	Pdbs []*Discovery_Database `protobuf:"bytes,2,rep,name=pdbs,proto3" json:"pdbs,omitempty"`
}

func (x *Discovery_DatabaseRoot_ContainerDatabase) Reset() {
	*x = Discovery_DatabaseRoot_ContainerDatabase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Discovery_DatabaseRoot_ContainerDatabase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Discovery_DatabaseRoot_ContainerDatabase) ProtoMessage() {}

func (x *Discovery_DatabaseRoot_ContainerDatabase) ProtoReflect() protoreflect.Message {
	mi := &file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Discovery_DatabaseRoot_ContainerDatabase.ProtoReflect.Descriptor instead.
func (*Discovery_DatabaseRoot_ContainerDatabase) Descriptor() ([]byte, []int) {
	return file_protos_oraclediscovery_oraclediscovery_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Discovery_DatabaseRoot_ContainerDatabase) GetRoot() *Discovery_Database {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *Discovery_DatabaseRoot_ContainerDatabase) GetPdbs() []*Discovery_Database {
	if x != nil {
		return x.Pdbs
	}
	return nil
}

// Represents a GCP virtual machine
type Discovery_Host_GcpVirtualMachine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"` // VM ID from metadata server
}

func (x *Discovery_Host_GcpVirtualMachine) Reset() {
	*x = Discovery_Host_GcpVirtualMachine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Discovery_Host_GcpVirtualMachine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Discovery_Host_GcpVirtualMachine) ProtoMessage() {}

func (x *Discovery_Host_GcpVirtualMachine) ProtoReflect() protoreflect.Message {
	mi := &file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Discovery_Host_GcpVirtualMachine.ProtoReflect.Descriptor instead.
func (*Discovery_Host_GcpVirtualMachine) Descriptor() ([]byte, []int) {
	return file_protos_oraclediscovery_oraclediscovery_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Discovery_Host_GcpVirtualMachine) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

type Discovery_Database_Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// instance_number from v$instance.
	InstanceNumber int64 `protobuf:"varint,1,opt,name=instance_number,json=instanceNumber,proto3" json:"instance_number,omitempty"`
	// instance_name from v$instance.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// ORACLE_SID environment variable from discovery.
	// This is typically the same as the instance name.
	OracleSid string `protobuf:"bytes,3,opt,name=oracle_sid,json=oracleSid,proto3" json:"oracle_sid,omitempty"`
	// ORACLE_HOME environment variable from discovery
	OracleHome string `protobuf:"bytes,4,opt,name=oracle_home,json=oracleHome,proto3" json:"oracle_home,omitempty"`
	// Hostname as reported by v$instance.
	Hostname string `protobuf:"bytes,5,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// The value comes from version_full in v$instance if accessible,
	// otherwise from version
	Version string                                      `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
	Edition Discovery_Database_Instance_DatabaseEdition `protobuf:"varint,7,opt,name=edition,proto3,enum=workloadagent.protos.oraclediscovery.Discovery_Database_Instance_DatabaseEdition" json:"edition,omitempty"`
	Type    Discovery_Database_Instance_DatabaseType    `protobuf:"varint,8,opt,name=type,proto3,enum=workloadagent.protos.oraclediscovery.Discovery_Database_Instance_DatabaseType" json:"type,omitempty"`
}

func (x *Discovery_Database_Instance) Reset() {
	*x = Discovery_Database_Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Discovery_Database_Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Discovery_Database_Instance) ProtoMessage() {}

func (x *Discovery_Database_Instance) ProtoReflect() protoreflect.Message {
	mi := &file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Discovery_Database_Instance.ProtoReflect.Descriptor instead.
func (*Discovery_Database_Instance) Descriptor() ([]byte, []int) {
	return file_protos_oraclediscovery_oraclediscovery_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *Discovery_Database_Instance) GetInstanceNumber() int64 {
	if x != nil {
		return x.InstanceNumber
	}
	return 0
}

func (x *Discovery_Database_Instance) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Discovery_Database_Instance) GetOracleSid() string {
	if x != nil {
		return x.OracleSid
	}
	return ""
}

func (x *Discovery_Database_Instance) GetOracleHome() string {
	if x != nil {
		return x.OracleHome
	}
	return ""
}

func (x *Discovery_Database_Instance) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Discovery_Database_Instance) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Discovery_Database_Instance) GetEdition() Discovery_Database_Instance_DatabaseEdition {
	if x != nil {
		return x.Edition
	}
	return Discovery_Database_Instance_DATABASE_EDITION_UNKNOWN
}

func (x *Discovery_Database_Instance) GetType() Discovery_Database_Instance_DatabaseType {
	if x != nil {
		return x.Type
	}
	return Discovery_Database_Instance_DATABASE_TYPE_UNKNOWN
}

type Discovery_Listener_ListenerId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias      string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	OracleHome string `protobuf:"bytes,2,opt,name=oracle_home,json=oracleHome,proto3" json:"oracle_home,omitempty"`
}

func (x *Discovery_Listener_ListenerId) Reset() {
	*x = Discovery_Listener_ListenerId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Discovery_Listener_ListenerId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Discovery_Listener_ListenerId) ProtoMessage() {}

func (x *Discovery_Listener_ListenerId) ProtoReflect() protoreflect.Message {
	mi := &file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Discovery_Listener_ListenerId.ProtoReflect.Descriptor instead.
func (*Discovery_Listener_ListenerId) Descriptor() ([]byte, []int) {
	return file_protos_oraclediscovery_oraclediscovery_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *Discovery_Listener_ListenerId) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *Discovery_Listener_ListenerId) GetOracleHome() string {
	if x != nil {
		return x.OracleHome
	}
	return ""
}

// The registered service.
type Discovery_Listener_Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Full name of the service (e.g., "test.example.com").
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Database instances that are registered with this network listener.
	Instances []*Discovery_Listener_Service_DatabaseInstance `protobuf:"bytes,2,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (x *Discovery_Listener_Service) Reset() {
	*x = Discovery_Listener_Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Discovery_Listener_Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Discovery_Listener_Service) ProtoMessage() {}

func (x *Discovery_Listener_Service) ProtoReflect() protoreflect.Message {
	mi := &file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Discovery_Listener_Service.ProtoReflect.Descriptor instead.
func (*Discovery_Listener_Service) Descriptor() ([]byte, []int) {
	return file_protos_oraclediscovery_oraclediscovery_proto_rawDescGZIP(), []int{0, 3, 1}
}

func (x *Discovery_Listener_Service) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Discovery_Listener_Service) GetInstances() []*Discovery_Listener_Service_DatabaseInstance {
	if x != nil {
		return x.Instances
	}
	return nil
}

// The network endpoints (addresses and protocols) the listener is
// configured to listen on.
type Discovery_Listener_Endpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Protocol:
	//
	//	*Discovery_Listener_Endpoint_Ipc
	//	*Discovery_Listener_Endpoint_Nmp
	//	*Discovery_Listener_Endpoint_Tcp
	//	*Discovery_Listener_Endpoint_Tcps
	Protocol isDiscovery_Listener_Endpoint_Protocol `protobuf_oneof:"protocol"`
}

func (x *Discovery_Listener_Endpoint) Reset() {
	*x = Discovery_Listener_Endpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Discovery_Listener_Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Discovery_Listener_Endpoint) ProtoMessage() {}

func (x *Discovery_Listener_Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Discovery_Listener_Endpoint.ProtoReflect.Descriptor instead.
func (*Discovery_Listener_Endpoint) Descriptor() ([]byte, []int) {
	return file_protos_oraclediscovery_oraclediscovery_proto_rawDescGZIP(), []int{0, 3, 2}
}

func (m *Discovery_Listener_Endpoint) GetProtocol() isDiscovery_Listener_Endpoint_Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (x *Discovery_Listener_Endpoint) GetIpc() *Discovery_Listener_IPCProtocol {
	if x, ok := x.GetProtocol().(*Discovery_Listener_Endpoint_Ipc); ok {
		return x.Ipc
	}
	return nil
}

func (x *Discovery_Listener_Endpoint) GetNmp() *Discovery_Listener_NMPProtocol {
	if x, ok := x.GetProtocol().(*Discovery_Listener_Endpoint_Nmp); ok {
		return x.Nmp
	}
	return nil
}

func (x *Discovery_Listener_Endpoint) GetTcp() *Discovery_Listener_TCPProtocol {
	if x, ok := x.GetProtocol().(*Discovery_Listener_Endpoint_Tcp); ok {
		return x.Tcp
	}
	return nil
}

func (x *Discovery_Listener_Endpoint) GetTcps() *Discovery_Listener_TCPProtocol {
	if x, ok := x.GetProtocol().(*Discovery_Listener_Endpoint_Tcps); ok {
		return x.Tcps
	}
	return nil
}

type isDiscovery_Listener_Endpoint_Protocol interface {
	isDiscovery_Listener_Endpoint_Protocol()
}

type Discovery_Listener_Endpoint_Ipc struct {
	Ipc *Discovery_Listener_IPCProtocol `protobuf:"bytes,1,opt,name=ipc,proto3,oneof"`
}

type Discovery_Listener_Endpoint_Nmp struct {
	Nmp *Discovery_Listener_NMPProtocol `protobuf:"bytes,2,opt,name=nmp,proto3,oneof"`
}

type Discovery_Listener_Endpoint_Tcp struct {
	Tcp *Discovery_Listener_TCPProtocol `protobuf:"bytes,3,opt,name=tcp,proto3,oneof"`
}

type Discovery_Listener_Endpoint_Tcps struct {
	Tcps *Discovery_Listener_TCPProtocol `protobuf:"bytes,4,opt,name=tcps,proto3,oneof"`
}

func (*Discovery_Listener_Endpoint_Ipc) isDiscovery_Listener_Endpoint_Protocol() {}

func (*Discovery_Listener_Endpoint_Nmp) isDiscovery_Listener_Endpoint_Protocol() {}

func (*Discovery_Listener_Endpoint_Tcp) isDiscovery_Listener_Endpoint_Protocol() {}

func (*Discovery_Listener_Endpoint_Tcps) isDiscovery_Listener_Endpoint_Protocol() {}

// Details specific to the IPC protocol.
type Discovery_Listener_IPCProtocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique name for the service.
	// Oracle recommends using the service name or SID of the service.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *Discovery_Listener_IPCProtocol) Reset() {
	*x = Discovery_Listener_IPCProtocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Discovery_Listener_IPCProtocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Discovery_Listener_IPCProtocol) ProtoMessage() {}

func (x *Discovery_Listener_IPCProtocol) ProtoReflect() protoreflect.Message {
	mi := &file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Discovery_Listener_IPCProtocol.ProtoReflect.Descriptor instead.
func (*Discovery_Listener_IPCProtocol) Descriptor() ([]byte, []int) {
	return file_protos_oraclediscovery_oraclediscovery_proto_rawDescGZIP(), []int{0, 3, 3}
}

func (x *Discovery_Listener_IPCProtocol) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// Details specific to the NMP protocol.
type Discovery_Listener_NMPProtocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the Oracle server.
	Server string `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	// The pipe name used to connect to the database server.
	// This is the same PIPE keyword specified on server with Named Pipes.
	Pipe string `protobuf:"bytes,2,opt,name=pipe,proto3" json:"pipe,omitempty"`
}

func (x *Discovery_Listener_NMPProtocol) Reset() {
	*x = Discovery_Listener_NMPProtocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Discovery_Listener_NMPProtocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Discovery_Listener_NMPProtocol) ProtoMessage() {}

func (x *Discovery_Listener_NMPProtocol) ProtoReflect() protoreflect.Message {
	mi := &file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Discovery_Listener_NMPProtocol.ProtoReflect.Descriptor instead.
func (*Discovery_Listener_NMPProtocol) Descriptor() ([]byte, []int) {
	return file_protos_oraclediscovery_oraclediscovery_proto_rawDescGZIP(), []int{0, 3, 4}
}

func (x *Discovery_Listener_NMPProtocol) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *Discovery_Listener_NMPProtocol) GetPipe() string {
	if x != nil {
		return x.Pipe
	}
	return ""
}

// Details for the TCP and TCPs protocols.
type Discovery_Listener_TCPProtocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hostname or IP address of the endpoint
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *Discovery_Listener_TCPProtocol) Reset() {
	*x = Discovery_Listener_TCPProtocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Discovery_Listener_TCPProtocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Discovery_Listener_TCPProtocol) ProtoMessage() {}

func (x *Discovery_Listener_TCPProtocol) ProtoReflect() protoreflect.Message {
	mi := &file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Discovery_Listener_TCPProtocol.ProtoReflect.Descriptor instead.
func (*Discovery_Listener_TCPProtocol) Descriptor() ([]byte, []int) {
	return file_protos_oraclediscovery_oraclediscovery_proto_rawDescGZIP(), []int{0, 3, 5}
}

func (x *Discovery_Listener_TCPProtocol) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Discovery_Listener_TCPProtocol) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type Discovery_Listener_Service_DatabaseInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the instance
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Status of the instance (e.g., "READY").
	// See the following doc for all possible values:
	// https://docs.oracle.com/en/database/oracle/oracle-database/21/netag/configuring-and-administering-oracle-net-listener.html
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// Service handlers allocated to each instance
	Handlers []*Discovery_Listener_Service_DatabaseInstance_Handler `protobuf:"bytes,3,rep,name=handlers,proto3" json:"handlers,omitempty"`
}

func (x *Discovery_Listener_Service_DatabaseInstance) Reset() {
	*x = Discovery_Listener_Service_DatabaseInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Discovery_Listener_Service_DatabaseInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Discovery_Listener_Service_DatabaseInstance) ProtoMessage() {}

func (x *Discovery_Listener_Service_DatabaseInstance) ProtoReflect() protoreflect.Message {
	mi := &file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Discovery_Listener_Service_DatabaseInstance.ProtoReflect.Descriptor instead.
func (*Discovery_Listener_Service_DatabaseInstance) Descriptor() ([]byte, []int) {
	return file_protos_oraclediscovery_oraclediscovery_proto_rawDescGZIP(), []int{0, 3, 1, 0}
}

func (x *Discovery_Listener_Service_DatabaseInstance) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Discovery_Listener_Service_DatabaseInstance) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Discovery_Listener_Service_DatabaseInstance) GetHandlers() []*Discovery_Listener_Service_DatabaseInstance_Handler {
	if x != nil {
		return x.Handlers
	}
	return nil
}

// Handlers are responsible for routing client requests to
// the appropriate server process.
type Discovery_Listener_Service_DatabaseInstance_Handler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the service handler.
	// Dispatchers are named D000 through D999. Dedicated servers have the
	// name of DEDICATED.
	Name  string                                                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                                                        // E.g., "DEDICATED" or "D000"
	State Discovery_Listener_Service_DatabaseInstance_Handler_State `protobuf:"varint,2,opt,name=state,proto3,enum=workloadagent.protos.oraclediscovery.Discovery_Listener_Service_DatabaseInstance_Handler_State" json:"state,omitempty"` // E.g., "ready"
	// The type of the handler. Can either be Dedicated server or
	// dispatcher
	//
	// Types that are assignable to Type:
	//
	//	*Discovery_Listener_Service_DatabaseInstance_Handler_DedicatedServer_
	//	*Discovery_Listener_Service_DatabaseInstance_Handler_Dispatcher_
	Type isDiscovery_Listener_Service_DatabaseInstance_Handler_Type `protobuf_oneof:"type"`
}

func (x *Discovery_Listener_Service_DatabaseInstance_Handler) Reset() {
	*x = Discovery_Listener_Service_DatabaseInstance_Handler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Discovery_Listener_Service_DatabaseInstance_Handler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Discovery_Listener_Service_DatabaseInstance_Handler) ProtoMessage() {}

func (x *Discovery_Listener_Service_DatabaseInstance_Handler) ProtoReflect() protoreflect.Message {
	mi := &file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Discovery_Listener_Service_DatabaseInstance_Handler.ProtoReflect.Descriptor instead.
func (*Discovery_Listener_Service_DatabaseInstance_Handler) Descriptor() ([]byte, []int) {
	return file_protos_oraclediscovery_oraclediscovery_proto_rawDescGZIP(), []int{0, 3, 1, 0, 0}
}

func (x *Discovery_Listener_Service_DatabaseInstance_Handler) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Discovery_Listener_Service_DatabaseInstance_Handler) GetState() Discovery_Listener_Service_DatabaseInstance_Handler_State {
	if x != nil {
		return x.State
	}
	return Discovery_Listener_Service_DatabaseInstance_Handler_STATE_UNKNOWN
}

func (m *Discovery_Listener_Service_DatabaseInstance_Handler) GetType() isDiscovery_Listener_Service_DatabaseInstance_Handler_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Discovery_Listener_Service_DatabaseInstance_Handler) GetDedicatedServer() *Discovery_Listener_Service_DatabaseInstance_Handler_DedicatedServer {
	if x, ok := x.GetType().(*Discovery_Listener_Service_DatabaseInstance_Handler_DedicatedServer_); ok {
		return x.DedicatedServer
	}
	return nil
}

func (x *Discovery_Listener_Service_DatabaseInstance_Handler) GetDispatcher() *Discovery_Listener_Service_DatabaseInstance_Handler_Dispatcher {
	if x, ok := x.GetType().(*Discovery_Listener_Service_DatabaseInstance_Handler_Dispatcher_); ok {
		return x.Dispatcher
	}
	return nil
}

type isDiscovery_Listener_Service_DatabaseInstance_Handler_Type interface {
	isDiscovery_Listener_Service_DatabaseInstance_Handler_Type()
}

type Discovery_Listener_Service_DatabaseInstance_Handler_DedicatedServer_ struct {
	DedicatedServer *Discovery_Listener_Service_DatabaseInstance_Handler_DedicatedServer `protobuf:"bytes,3,opt,name=dedicated_server,json=dedicatedServer,proto3,oneof"`
}

type Discovery_Listener_Service_DatabaseInstance_Handler_Dispatcher_ struct {
	Dispatcher *Discovery_Listener_Service_DatabaseInstance_Handler_Dispatcher `protobuf:"bytes,4,opt,name=dispatcher,proto3,oneof"`
}

func (*Discovery_Listener_Service_DatabaseInstance_Handler_DedicatedServer_) isDiscovery_Listener_Service_DatabaseInstance_Handler_Type() {
}

func (*Discovery_Listener_Service_DatabaseInstance_Handler_Dispatcher_) isDiscovery_Listener_Service_DatabaseInstance_Handler_Type() {
}

// Information specific to dedicated servers.
type Discovery_Listener_Service_DatabaseInstance_Handler_DedicatedServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Discovery_Listener_Service_DatabaseInstance_Handler_DedicatedServer) Reset() {
	*x = Discovery_Listener_Service_DatabaseInstance_Handler_DedicatedServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Discovery_Listener_Service_DatabaseInstance_Handler_DedicatedServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Discovery_Listener_Service_DatabaseInstance_Handler_DedicatedServer) ProtoMessage() {}

func (x *Discovery_Listener_Service_DatabaseInstance_Handler_DedicatedServer) ProtoReflect() protoreflect.Message {
	mi := &file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Discovery_Listener_Service_DatabaseInstance_Handler_DedicatedServer.ProtoReflect.Descriptor instead.
func (*Discovery_Listener_Service_DatabaseInstance_Handler_DedicatedServer) Descriptor() ([]byte, []int) {
	return file_protos_oraclediscovery_oraclediscovery_proto_rawDescGZIP(), []int{0, 3, 1, 0, 0, 0}
}

// Information specific to dispatchers.
type Discovery_Listener_Service_DatabaseInstance_Handler_Dispatcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MachineName string                                                                  `protobuf:"bytes,1,opt,name=machine_name,json=machineName,proto3" json:"machine_name,omitempty"`
	Pid         uint32                                                                  `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
	Address     *Discovery_Listener_Service_DatabaseInstance_Handler_Dispatcher_Address `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Discovery_Listener_Service_DatabaseInstance_Handler_Dispatcher) Reset() {
	*x = Discovery_Listener_Service_DatabaseInstance_Handler_Dispatcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Discovery_Listener_Service_DatabaseInstance_Handler_Dispatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Discovery_Listener_Service_DatabaseInstance_Handler_Dispatcher) ProtoMessage() {}

func (x *Discovery_Listener_Service_DatabaseInstance_Handler_Dispatcher) ProtoReflect() protoreflect.Message {
	mi := &file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Discovery_Listener_Service_DatabaseInstance_Handler_Dispatcher.ProtoReflect.Descriptor instead.
func (*Discovery_Listener_Service_DatabaseInstance_Handler_Dispatcher) Descriptor() ([]byte, []int) {
	return file_protos_oraclediscovery_oraclediscovery_proto_rawDescGZIP(), []int{0, 3, 1, 0, 0, 1}
}

func (x *Discovery_Listener_Service_DatabaseInstance_Handler_Dispatcher) GetMachineName() string {
	if x != nil {
		return x.MachineName
	}
	return ""
}

func (x *Discovery_Listener_Service_DatabaseInstance_Handler_Dispatcher) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *Discovery_Listener_Service_DatabaseInstance_Handler_Dispatcher) GetAddress() *Discovery_Listener_Service_DatabaseInstance_Handler_Dispatcher_Address {
	if x != nil {
		return x.Address
	}
	return nil
}

type Discovery_Listener_Service_DatabaseInstance_Handler_Dispatcher_Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host     string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port     uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Protocol string `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (x *Discovery_Listener_Service_DatabaseInstance_Handler_Dispatcher_Address) Reset() {
	*x = Discovery_Listener_Service_DatabaseInstance_Handler_Dispatcher_Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Discovery_Listener_Service_DatabaseInstance_Handler_Dispatcher_Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Discovery_Listener_Service_DatabaseInstance_Handler_Dispatcher_Address) ProtoMessage() {}

func (x *Discovery_Listener_Service_DatabaseInstance_Handler_Dispatcher_Address) ProtoReflect() protoreflect.Message {
	mi := &file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Discovery_Listener_Service_DatabaseInstance_Handler_Dispatcher_Address.ProtoReflect.Descriptor instead.
func (*Discovery_Listener_Service_DatabaseInstance_Handler_Dispatcher_Address) Descriptor() ([]byte, []int) {
	return file_protos_oraclediscovery_oraclediscovery_proto_rawDescGZIP(), []int{0, 3, 1, 0, 0, 1, 0}
}

func (x *Discovery_Listener_Service_DatabaseInstance_Handler_Dispatcher_Address) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Discovery_Listener_Service_DatabaseInstance_Handler_Dispatcher_Address) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Discovery_Listener_Service_DatabaseInstance_Handler_Dispatcher_Address) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

var File_protos_oraclediscovery_oraclediscovery_proto protoreflect.FileDescriptor

var file_protos_oraclediscovery_oraclediscovery_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24,
	0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc0, 0x23, 0x0a, 0x09, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x12, 0x5a, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x6f, 0x6f, 0x74, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x12,
	0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x56,
	0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x48, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x1a, 0x80, 0x03, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x6f, 0x6f,
	0x74, 0x12, 0x4a, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x48, 0x00, 0x52, 0x02, 0x64, 0x62, 0x12, 0x62, 0x0a,
	0x03, 0x63, 0x64, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x48, 0x00, 0x52, 0x03, 0x63, 0x64,
	0x62, 0x1a, 0xaf, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x4c, 0x0a, 0x04, 0x70, 0x64, 0x62, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x04, 0x70,
	0x64, 0x62, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x1a, 0xbf, 0x01, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x02,
	0x76, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x2e, 0x47,
	0x63, 0x70, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x48, 0x00, 0x52, 0x02, 0x76, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x1a, 0x34, 0x0a, 0x11, 0x47, 0x63, 0x70, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xe2, 0x0a, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x62, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x64, 0x62, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x62,
	0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x62, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x67, 0x75, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x6a, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52,
	0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x31, 0x0a,
	0x15, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x62, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x44, 0x62, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x5f, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x1a, 0xd8, 0x05, 0x0a, 0x08, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x6b, 0x0a, 0x07, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x51, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x45, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4e, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x45,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41,
	0x53, 0x45, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45,
	0x5f, 0x45, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x45, 0x45,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45,
	0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x44,
	0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x4f, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45,
	0x5f, 0x45, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x10, 0x04, 0x12, 0x18, 0x0a,
	0x14, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x45, 0x32, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x41, 0x54, 0x41, 0x42,
	0x41, 0x53, 0x45, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x58, 0x45, 0x10, 0x06,
	0x22, 0x7a, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x44,
	0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x43,
	0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x43, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45,
	0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x03, 0x22, 0xcb, 0x01, 0x0a,
	0x0c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x41, 0x54, 0x41,
	0x42, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52,
	0x59, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f,
	0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x4e, 0x44, 0x42, 0x59, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x41, 0x54, 0x41, 0x42,
	0x41, 0x53, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c,
	0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x42, 0x59, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x41,
	0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x48, 0x59, 0x53,
	0x49, 0x43, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x42, 0x59, 0x10, 0x04, 0x12, 0x1a,
	0x0a, 0x16, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f,
	0x46, 0x41, 0x52, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x05, 0x1a, 0xcb, 0x11, 0x0a, 0x08, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c,
	0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c,
	0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x5c, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x1a, 0x43, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x1a, 0xf6, 0x08, 0x0a, 0x07, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6f, 0x0a, 0x09, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0xe5, 0x07, 0x0a, 0x10, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x75, 0x0a, 0x08, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x59, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x52, 0x08, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x72, 0x73, 0x1a, 0xad, 0x06, 0x0a, 0x07, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x75, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x5f, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x10, 0x64, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x0f, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x86, 0x01, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x0a, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x1a, 0x11, 0x0a, 0x0f, 0x44,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x99,
	0x02, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70,
	0x69, 0x64, 0x12, 0x86, 0x01, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x6c, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e,
	0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x4d, 0x0a, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x3e, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x1a, 0x80, 0x03, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x58, 0x0a, 0x03, 0x69, 0x70, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x49, 0x50, 0x43, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x48, 0x00, 0x52, 0x03, 0x69, 0x70, 0x63, 0x12, 0x58, 0x0a, 0x03, 0x6e, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x2e, 0x4e, 0x4d, 0x50, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x48, 0x00, 0x52, 0x03,
	0x6e, 0x6d, 0x70, 0x12, 0x58, 0x0a, 0x03, 0x74, 0x63, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x44, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x54, 0x43, 0x50, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x48, 0x00, 0x52, 0x03, 0x74, 0x63, 0x70, 0x12, 0x5a, 0x0a,
	0x04, 0x74, 0x63, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x54, 0x43, 0x50, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x48, 0x00, 0x52, 0x04, 0x74, 0x63, 0x70, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0x1f, 0x0a, 0x0b, 0x49, 0x50, 0x43, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x1a, 0x39, 0x0a, 0x0b, 0x4e, 0x4d, 0x50, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x69, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x69, 0x70,
	0x65, 0x1a, 0x35, 0x0a, 0x0b, 0x54, 0x43, 0x50, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x45, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_oraclediscovery_oraclediscovery_proto_rawDescOnce sync.Once
	file_protos_oraclediscovery_oraclediscovery_proto_rawDescData = file_protos_oraclediscovery_oraclediscovery_proto_rawDesc
)

func file_protos_oraclediscovery_oraclediscovery_proto_rawDescGZIP() []byte {
	file_protos_oraclediscovery_oraclediscovery_proto_rawDescOnce.Do(func() {
		file_protos_oraclediscovery_oraclediscovery_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_oraclediscovery_oraclediscovery_proto_rawDescData)
	})
	return file_protos_oraclediscovery_oraclediscovery_proto_rawDescData
}

var file_protos_oraclediscovery_oraclediscovery_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_protos_oraclediscovery_oraclediscovery_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_protos_oraclediscovery_oraclediscovery_proto_goTypes = []interface{}{
	(Discovery_Database_DatabaseRole)(0),                           // 0: workloadagent.protos.oraclediscovery.Discovery.Database.DatabaseRole
	(Discovery_Database_Instance_DatabaseEdition)(0),               // 1: workloadagent.protos.oraclediscovery.Discovery.Database.Instance.DatabaseEdition
	(Discovery_Database_Instance_DatabaseType)(0),                  // 2: workloadagent.protos.oraclediscovery.Discovery.Database.Instance.DatabaseType
	(Discovery_Listener_Service_DatabaseInstance_Handler_State)(0), // 3: workloadagent.protos.oraclediscovery.Discovery.Listener.Service.DatabaseInstance.Handler.State
	(*Discovery)(nil),                                                              // 4: workloadagent.protos.oraclediscovery.Discovery
	(*Discovery_DatabaseRoot)(nil),                                                 // 5: workloadagent.protos.oraclediscovery.Discovery.DatabaseRoot
	(*Discovery_Host)(nil),                                                         // 6: workloadagent.protos.oraclediscovery.Discovery.Host
	(*Discovery_Database)(nil),                                                     // 7: workloadagent.protos.oraclediscovery.Discovery.Database
	(*Discovery_Listener)(nil),                                                     // 8: workloadagent.protos.oraclediscovery.Discovery.Listener
	(*Discovery_DatabaseRoot_ContainerDatabase)(nil),                               // 9: workloadagent.protos.oraclediscovery.Discovery.DatabaseRoot.ContainerDatabase
	(*Discovery_Host_GcpVirtualMachine)(nil),                                       // 10: workloadagent.protos.oraclediscovery.Discovery.Host.GcpVirtualMachine
	(*Discovery_Database_Instance)(nil),                                            // 11: workloadagent.protos.oraclediscovery.Discovery.Database.Instance
	(*Discovery_Listener_ListenerId)(nil),                                          // 12: workloadagent.protos.oraclediscovery.Discovery.Listener.ListenerId
	(*Discovery_Listener_Service)(nil),                                             // 13: workloadagent.protos.oraclediscovery.Discovery.Listener.Service
	(*Discovery_Listener_Endpoint)(nil),                                            // 14: workloadagent.protos.oraclediscovery.Discovery.Listener.Endpoint
	(*Discovery_Listener_IPCProtocol)(nil),                                         // 15: workloadagent.protos.oraclediscovery.Discovery.Listener.IPCProtocol
	(*Discovery_Listener_NMPProtocol)(nil),                                         // 16: workloadagent.protos.oraclediscovery.Discovery.Listener.NMPProtocol
	(*Discovery_Listener_TCPProtocol)(nil),                                         // 17: workloadagent.protos.oraclediscovery.Discovery.Listener.TCPProtocol
	(*Discovery_Listener_Service_DatabaseInstance)(nil),                            // 18: workloadagent.protos.oraclediscovery.Discovery.Listener.Service.DatabaseInstance
	(*Discovery_Listener_Service_DatabaseInstance_Handler)(nil),                    // 19: workloadagent.protos.oraclediscovery.Discovery.Listener.Service.DatabaseInstance.Handler
	(*Discovery_Listener_Service_DatabaseInstance_Handler_DedicatedServer)(nil),    // 20: workloadagent.protos.oraclediscovery.Discovery.Listener.Service.DatabaseInstance.Handler.DedicatedServer
	(*Discovery_Listener_Service_DatabaseInstance_Handler_Dispatcher)(nil),         // 21: workloadagent.protos.oraclediscovery.Discovery.Listener.Service.DatabaseInstance.Handler.Dispatcher
	(*Discovery_Listener_Service_DatabaseInstance_Handler_Dispatcher_Address)(nil), // 22: workloadagent.protos.oraclediscovery.Discovery.Listener.Service.DatabaseInstance.Handler.Dispatcher.Address
	(*timestamppb.Timestamp)(nil),                                                  // 23: google.protobuf.Timestamp
}
var file_protos_oraclediscovery_oraclediscovery_proto_depIdxs = []int32{
	5,  // 0: workloadagent.protos.oraclediscovery.Discovery.databases:type_name -> workloadagent.protos.oraclediscovery.Discovery.DatabaseRoot
	23, // 1: workloadagent.protos.oraclediscovery.Discovery.last_updated:type_name -> google.protobuf.Timestamp
	8,  // 2: workloadagent.protos.oraclediscovery.Discovery.listeners:type_name -> workloadagent.protos.oraclediscovery.Discovery.Listener
	6,  // 3: workloadagent.protos.oraclediscovery.Discovery.host:type_name -> workloadagent.protos.oraclediscovery.Discovery.Host
	7,  // 4: workloadagent.protos.oraclediscovery.Discovery.DatabaseRoot.db:type_name -> workloadagent.protos.oraclediscovery.Discovery.Database
	9,  // 5: workloadagent.protos.oraclediscovery.Discovery.DatabaseRoot.cdb:type_name -> workloadagent.protos.oraclediscovery.Discovery.DatabaseRoot.ContainerDatabase
	10, // 6: workloadagent.protos.oraclediscovery.Discovery.Host.vm:type_name -> workloadagent.protos.oraclediscovery.Discovery.Host.GcpVirtualMachine
	23, // 7: workloadagent.protos.oraclediscovery.Discovery.Database.created:type_name -> google.protobuf.Timestamp
	0,  // 8: workloadagent.protos.oraclediscovery.Discovery.Database.database_role:type_name -> workloadagent.protos.oraclediscovery.Discovery.Database.DatabaseRole
	11, // 9: workloadagent.protos.oraclediscovery.Discovery.Database.instances:type_name -> workloadagent.protos.oraclediscovery.Discovery.Database.Instance
	12, // 10: workloadagent.protos.oraclediscovery.Discovery.Listener.id:type_name -> workloadagent.protos.oraclediscovery.Discovery.Listener.ListenerId
	23, // 11: workloadagent.protos.oraclediscovery.Discovery.Listener.start_time:type_name -> google.protobuf.Timestamp
	13, // 12: workloadagent.protos.oraclediscovery.Discovery.Listener.services:type_name -> workloadagent.protos.oraclediscovery.Discovery.Listener.Service
	14, // 13: workloadagent.protos.oraclediscovery.Discovery.Listener.endpoints:type_name -> workloadagent.protos.oraclediscovery.Discovery.Listener.Endpoint
	7,  // 14: workloadagent.protos.oraclediscovery.Discovery.DatabaseRoot.ContainerDatabase.root:type_name -> workloadagent.protos.oraclediscovery.Discovery.Database
	7,  // 15: workloadagent.protos.oraclediscovery.Discovery.DatabaseRoot.ContainerDatabase.pdbs:type_name -> workloadagent.protos.oraclediscovery.Discovery.Database
	1,  // 16: workloadagent.protos.oraclediscovery.Discovery.Database.Instance.edition:type_name -> workloadagent.protos.oraclediscovery.Discovery.Database.Instance.DatabaseEdition
	2,  // 17: workloadagent.protos.oraclediscovery.Discovery.Database.Instance.type:type_name -> workloadagent.protos.oraclediscovery.Discovery.Database.Instance.DatabaseType
	18, // 18: workloadagent.protos.oraclediscovery.Discovery.Listener.Service.instances:type_name -> workloadagent.protos.oraclediscovery.Discovery.Listener.Service.DatabaseInstance
	15, // 19: workloadagent.protos.oraclediscovery.Discovery.Listener.Endpoint.ipc:type_name -> workloadagent.protos.oraclediscovery.Discovery.Listener.IPCProtocol
	16, // 20: workloadagent.protos.oraclediscovery.Discovery.Listener.Endpoint.nmp:type_name -> workloadagent.protos.oraclediscovery.Discovery.Listener.NMPProtocol
	17, // 21: workloadagent.protos.oraclediscovery.Discovery.Listener.Endpoint.tcp:type_name -> workloadagent.protos.oraclediscovery.Discovery.Listener.TCPProtocol
	17, // 22: workloadagent.protos.oraclediscovery.Discovery.Listener.Endpoint.tcps:type_name -> workloadagent.protos.oraclediscovery.Discovery.Listener.TCPProtocol
	19, // 23: workloadagent.protos.oraclediscovery.Discovery.Listener.Service.DatabaseInstance.handlers:type_name -> workloadagent.protos.oraclediscovery.Discovery.Listener.Service.DatabaseInstance.Handler
	3,  // 24: workloadagent.protos.oraclediscovery.Discovery.Listener.Service.DatabaseInstance.Handler.state:type_name -> workloadagent.protos.oraclediscovery.Discovery.Listener.Service.DatabaseInstance.Handler.State
	20, // 25: workloadagent.protos.oraclediscovery.Discovery.Listener.Service.DatabaseInstance.Handler.dedicated_server:type_name -> workloadagent.protos.oraclediscovery.Discovery.Listener.Service.DatabaseInstance.Handler.DedicatedServer
	21, // 26: workloadagent.protos.oraclediscovery.Discovery.Listener.Service.DatabaseInstance.Handler.dispatcher:type_name -> workloadagent.protos.oraclediscovery.Discovery.Listener.Service.DatabaseInstance.Handler.Dispatcher
	22, // 27: workloadagent.protos.oraclediscovery.Discovery.Listener.Service.DatabaseInstance.Handler.Dispatcher.address:type_name -> workloadagent.protos.oraclediscovery.Discovery.Listener.Service.DatabaseInstance.Handler.Dispatcher.Address
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_protos_oraclediscovery_oraclediscovery_proto_init() }
func file_protos_oraclediscovery_oraclediscovery_proto_init() {
	if File_protos_oraclediscovery_oraclediscovery_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Discovery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Discovery_DatabaseRoot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Discovery_Host); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Discovery_Database); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Discovery_Listener); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Discovery_DatabaseRoot_ContainerDatabase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Discovery_Host_GcpVirtualMachine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Discovery_Database_Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Discovery_Listener_ListenerId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Discovery_Listener_Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Discovery_Listener_Endpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Discovery_Listener_IPCProtocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Discovery_Listener_NMPProtocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Discovery_Listener_TCPProtocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Discovery_Listener_Service_DatabaseInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Discovery_Listener_Service_DatabaseInstance_Handler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Discovery_Listener_Service_DatabaseInstance_Handler_DedicatedServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Discovery_Listener_Service_DatabaseInstance_Handler_Dispatcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Discovery_Listener_Service_DatabaseInstance_Handler_Dispatcher_Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Discovery_DatabaseRoot_Db)(nil),
		(*Discovery_DatabaseRoot_Cdb)(nil),
	}
	file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Discovery_Host_Vm)(nil),
	}
	file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*Discovery_Listener_Endpoint_Ipc)(nil),
		(*Discovery_Listener_Endpoint_Nmp)(nil),
		(*Discovery_Listener_Endpoint_Tcp)(nil),
		(*Discovery_Listener_Endpoint_Tcps)(nil),
	}
	file_protos_oraclediscovery_oraclediscovery_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*Discovery_Listener_Service_DatabaseInstance_Handler_DedicatedServer_)(nil),
		(*Discovery_Listener_Service_DatabaseInstance_Handler_Dispatcher_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_oraclediscovery_oraclediscovery_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_oraclediscovery_oraclediscovery_proto_goTypes,
		DependencyIndexes: file_protos_oraclediscovery_oraclediscovery_proto_depIdxs,
		EnumInfos:         file_protos_oraclediscovery_oraclediscovery_proto_enumTypes,
		MessageInfos:      file_protos_oraclediscovery_oraclediscovery_proto_msgTypes,
	}.Build()
	File_protos_oraclediscovery_oraclediscovery_proto = out.File
	file_protos_oraclediscovery_oraclediscovery_proto_rawDesc = nil
	file_protos_oraclediscovery_oraclediscovery_proto_goTypes = nil
	file_protos_oraclediscovery_oraclediscovery_proto_depIdxs = nil
}
