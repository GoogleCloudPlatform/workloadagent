//
//Copyright 2025 Google LLC
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//https://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.23.4
// source: protos/configuration/configuration.proto

package configuration

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MetricType int32

const (
	MetricType_METRIC_UNSPECIFIED MetricType = 0
	MetricType_METRIC_LABEL       MetricType = 1
	MetricType_METRIC_GAUGE       MetricType = 2
	MetricType_METRIC_CUMULATIVE  MetricType = 3
)

// Enum value maps for MetricType.
var (
	MetricType_name = map[int32]string{
		0: "METRIC_UNSPECIFIED",
		1: "METRIC_LABEL",
		2: "METRIC_GAUGE",
		3: "METRIC_CUMULATIVE",
	}
	MetricType_value = map[string]int32{
		"METRIC_UNSPECIFIED": 0,
		"METRIC_LABEL":       1,
		"METRIC_GAUGE":       2,
		"METRIC_CUMULATIVE":  3,
	}
)

func (x MetricType) Enum() *MetricType {
	p := new(MetricType)
	*p = x
	return p
}

func (x MetricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_configuration_configuration_proto_enumTypes[0].Descriptor()
}

func (MetricType) Type() protoreflect.EnumType {
	return &file_protos_configuration_configuration_proto_enumTypes[0]
}

func (x MetricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricType.Descriptor instead.
func (MetricType) EnumDescriptor() ([]byte, []int) {
	return file_protos_configuration_configuration_proto_rawDescGZIP(), []int{0}
}

type ValueType int32

const (
	ValueType_VALUE_UNSPECIFIED ValueType = 0
	ValueType_VALUE_BOOL        ValueType = 1
	ValueType_VALUE_INT64       ValueType = 2
	ValueType_VALUE_STRING      ValueType = 3
	ValueType_VALUE_DOUBLE      ValueType = 4
)

// Enum value maps for ValueType.
var (
	ValueType_name = map[int32]string{
		0: "VALUE_UNSPECIFIED",
		1: "VALUE_BOOL",
		2: "VALUE_INT64",
		3: "VALUE_STRING",
		4: "VALUE_DOUBLE",
	}
	ValueType_value = map[string]int32{
		"VALUE_UNSPECIFIED": 0,
		"VALUE_BOOL":        1,
		"VALUE_INT64":       2,
		"VALUE_STRING":      3,
		"VALUE_DOUBLE":      4,
	}
)

func (x ValueType) Enum() *ValueType {
	p := new(ValueType)
	*p = x
	return p
}

func (x ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_configuration_configuration_proto_enumTypes[1].Descriptor()
}

func (ValueType) Type() protoreflect.EnumType {
	return &file_protos_configuration_configuration_proto_enumTypes[1]
}

func (x ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValueType.Descriptor instead.
func (ValueType) EnumDescriptor() ([]byte, []int) {
	return file_protos_configuration_configuration_proto_rawDescGZIP(), []int{1}
}

type Configuration_LogLevel int32

const (
	Configuration_UNDEFINED Configuration_LogLevel = 0
	Configuration_DEBUG     Configuration_LogLevel = 1
	Configuration_INFO      Configuration_LogLevel = 2
	Configuration_WARNING   Configuration_LogLevel = 3
	Configuration_ERROR     Configuration_LogLevel = 4
)

// Enum value maps for Configuration_LogLevel.
var (
	Configuration_LogLevel_name = map[int32]string{
		0: "UNDEFINED",
		1: "DEBUG",
		2: "INFO",
		3: "WARNING",
		4: "ERROR",
	}
	Configuration_LogLevel_value = map[string]int32{
		"UNDEFINED": 0,
		"DEBUG":     1,
		"INFO":      2,
		"WARNING":   3,
		"ERROR":     4,
	}
)

func (x Configuration_LogLevel) Enum() *Configuration_LogLevel {
	p := new(Configuration_LogLevel)
	*p = x
	return p
}

func (x Configuration_LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Configuration_LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_configuration_configuration_proto_enumTypes[2].Descriptor()
}

func (Configuration_LogLevel) Type() protoreflect.EnumType {
	return &file_protos_configuration_configuration_proto_enumTypes[2]
}

func (x Configuration_LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Configuration_LogLevel.Descriptor instead.
func (Configuration_LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_protos_configuration_configuration_proto_rawDescGZIP(), []int{0, 0}
}

type Query_DatabaseRole int32

const (
	Query_UNSPECIFIED Query_DatabaseRole = 0
	Query_PRIMARY     Query_DatabaseRole = 1
	Query_STANDBY     Query_DatabaseRole = 2
	Query_BOTH        Query_DatabaseRole = 3
)

// Enum value maps for Query_DatabaseRole.
var (
	Query_DatabaseRole_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "PRIMARY",
		2: "STANDBY",
		3: "BOTH",
	}
	Query_DatabaseRole_value = map[string]int32{
		"UNSPECIFIED": 0,
		"PRIMARY":     1,
		"STANDBY":     2,
		"BOTH":        3,
	}
)

func (x Query_DatabaseRole) Enum() *Query_DatabaseRole {
	p := new(Query_DatabaseRole)
	*p = x
	return p
}

func (x Query_DatabaseRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Query_DatabaseRole) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_configuration_configuration_proto_enumTypes[3].Descriptor()
}

func (Query_DatabaseRole) Type() protoreflect.EnumType {
	return &file_protos_configuration_configuration_proto_enumTypes[3]
}

func (x Query_DatabaseRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Query_DatabaseRole.Descriptor instead.
func (Query_DatabaseRole) EnumDescriptor() ([]byte, []int) {
	return file_protos_configuration_configuration_proto_rawDescGZIP(), []int{15, 0}
}

type Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceEndpointOverride string                  `protobuf:"bytes,1,opt,name=service_endpoint_override,json=serviceEndpointOverride,proto3" json:"service_endpoint_override,omitempty"`
	LogLevel                Configuration_LogLevel  `protobuf:"varint,2,opt,name=log_level,json=logLevel,proto3,enum=workloadagent.protos.configuration.Configuration_LogLevel" json:"log_level,omitempty"`
	LogToCloud              *bool                   `protobuf:"varint,3,opt,name=log_to_cloud,json=logToCloud,proto3,oneof" json:"log_to_cloud,omitempty"`
	CloudProperties         *CloudProperties        `protobuf:"bytes,4,opt,name=cloud_properties,json=cloudProperties,proto3" json:"cloud_properties,omitempty"`
	AgentProperties         *AgentProperties        `protobuf:"bytes,5,opt,name=agent_properties,json=agentProperties,proto3" json:"agent_properties,omitempty"`
	OracleConfiguration     *OracleConfiguration    `protobuf:"bytes,6,opt,name=oracle_configuration,json=oracleConfiguration,proto3" json:"oracle_configuration,omitempty"`
	MysqlConfiguration      *MySQLConfiguration     `protobuf:"bytes,7,opt,name=mysql_configuration,json=mysqlConfiguration,proto3" json:"mysql_configuration,omitempty"`
	CommonDiscovery         *CommonDiscovery        `protobuf:"bytes,8,opt,name=common_discovery,json=commonDiscovery,proto3" json:"common_discovery,omitempty"`
	RedisConfiguration      *RedisConfiguration     `protobuf:"bytes,9,opt,name=redis_configuration,json=redisConfiguration,proto3" json:"redis_configuration,omitempty"`
	SqlserverConfiguration  *SQLServerConfiguration `protobuf:"bytes,10,opt,name=sqlserver_configuration,json=sqlserverConfiguration,proto3" json:"sqlserver_configuration,omitempty"`
	DataWarehouseEndpoint   string                  `protobuf:"bytes,11,opt,name=data_warehouse_endpoint,json=dataWarehouseEndpoint,proto3" json:"data_warehouse_endpoint,omitempty"`
	PostgresConfiguration   *PostgresConfiguration  `protobuf:"bytes,12,opt,name=postgres_configuration,json=postgresConfiguration,proto3" json:"postgres_configuration,omitempty"`
	OpenshiftConfiguration  *OpenShiftConfiguration `protobuf:"bytes,13,opt,name=openshift_configuration,json=openshiftConfiguration,proto3" json:"openshift_configuration,omitempty"`
	MongoDbConfiguration    *MongoDBConfiguration   `protobuf:"bytes,14,opt,name=mongo_db_configuration,json=mongoDbConfiguration,proto3" json:"mongo_db_configuration,omitempty"`
}

func (x *Configuration) Reset() {
	*x = Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_configuration_configuration_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration) ProtoMessage() {}

func (x *Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_protos_configuration_configuration_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration.ProtoReflect.Descriptor instead.
func (*Configuration) Descriptor() ([]byte, []int) {
	return file_protos_configuration_configuration_proto_rawDescGZIP(), []int{0}
}

func (x *Configuration) GetServiceEndpointOverride() string {
	if x != nil {
		return x.ServiceEndpointOverride
	}
	return ""
}

func (x *Configuration) GetLogLevel() Configuration_LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return Configuration_UNDEFINED
}

func (x *Configuration) GetLogToCloud() bool {
	if x != nil && x.LogToCloud != nil {
		return *x.LogToCloud
	}
	return false
}

func (x *Configuration) GetCloudProperties() *CloudProperties {
	if x != nil {
		return x.CloudProperties
	}
	return nil
}

func (x *Configuration) GetAgentProperties() *AgentProperties {
	if x != nil {
		return x.AgentProperties
	}
	return nil
}

func (x *Configuration) GetOracleConfiguration() *OracleConfiguration {
	if x != nil {
		return x.OracleConfiguration
	}
	return nil
}

func (x *Configuration) GetMysqlConfiguration() *MySQLConfiguration {
	if x != nil {
		return x.MysqlConfiguration
	}
	return nil
}

func (x *Configuration) GetCommonDiscovery() *CommonDiscovery {
	if x != nil {
		return x.CommonDiscovery
	}
	return nil
}

func (x *Configuration) GetRedisConfiguration() *RedisConfiguration {
	if x != nil {
		return x.RedisConfiguration
	}
	return nil
}

func (x *Configuration) GetSqlserverConfiguration() *SQLServerConfiguration {
	if x != nil {
		return x.SqlserverConfiguration
	}
	return nil
}

func (x *Configuration) GetDataWarehouseEndpoint() string {
	if x != nil {
		return x.DataWarehouseEndpoint
	}
	return ""
}

func (x *Configuration) GetPostgresConfiguration() *PostgresConfiguration {
	if x != nil {
		return x.PostgresConfiguration
	}
	return nil
}

func (x *Configuration) GetOpenshiftConfiguration() *OpenShiftConfiguration {
	if x != nil {
		return x.OpenshiftConfiguration
	}
	return nil
}

func (x *Configuration) GetMongoDbConfiguration() *MongoDBConfiguration {
	if x != nil {
		return x.MongoDbConfiguration
	}
	return nil
}

type CloudProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId        string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	InstanceId       string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Zone             string `protobuf:"bytes,3,opt,name=zone,proto3" json:"zone,omitempty"`
	InstanceName     string `protobuf:"bytes,4,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	Image            string `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
	NumericProjectId string `protobuf:"bytes,6,opt,name=numeric_project_id,json=numericProjectId,proto3" json:"numeric_project_id,omitempty"`
	Region           string `protobuf:"bytes,7,opt,name=region,proto3" json:"region,omitempty"` // This is needed only for baremtal systems and is not
	// used for GCE instances.
	MachineType  string `protobuf:"bytes,8,opt,name=machine_type,json=machineType,proto3" json:"machine_type,omitempty"`
	VcpuCount    int64  `protobuf:"varint,9,opt,name=vcpu_count,json=vcpuCount,proto3" json:"vcpu_count,omitempty"`
	MemorySizeMb int64  `protobuf:"varint,10,opt,name=memory_size_mb,json=memorySizeMb,proto3" json:"memory_size_mb,omitempty"`
}

func (x *CloudProperties) Reset() {
	*x = CloudProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_configuration_configuration_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudProperties) ProtoMessage() {}

func (x *CloudProperties) ProtoReflect() protoreflect.Message {
	mi := &file_protos_configuration_configuration_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudProperties.ProtoReflect.Descriptor instead.
func (*CloudProperties) Descriptor() ([]byte, []int) {
	return file_protos_configuration_configuration_proto_rawDescGZIP(), []int{1}
}

func (x *CloudProperties) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CloudProperties) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *CloudProperties) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *CloudProperties) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *CloudProperties) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *CloudProperties) GetNumericProjectId() string {
	if x != nil {
		return x.NumericProjectId
	}
	return ""
}

func (x *CloudProperties) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CloudProperties) GetMachineType() string {
	if x != nil {
		return x.MachineType
	}
	return ""
}

func (x *CloudProperties) GetVcpuCount() int64 {
	if x != nil {
		return x.VcpuCount
	}
	return 0
}

func (x *CloudProperties) GetMemorySizeMb() int64 {
	if x != nil {
		return x.MemorySizeMb
	}
	return 0
}

type AgentProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version         string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Name            string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	LogUsageMetrics bool   `protobuf:"varint,3,opt,name=log_usage_metrics,json=logUsageMetrics,proto3" json:"log_usage_metrics,omitempty"`
}

func (x *AgentProperties) Reset() {
	*x = AgentProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_configuration_configuration_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentProperties) ProtoMessage() {}

func (x *AgentProperties) ProtoReflect() protoreflect.Message {
	mi := &file_protos_configuration_configuration_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentProperties.ProtoReflect.Descriptor instead.
func (*AgentProperties) Descriptor() ([]byte, []int) {
	return file_protos_configuration_configuration_proto_rawDescGZIP(), []int{2}
}

func (x *AgentProperties) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AgentProperties) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AgentProperties) GetLogUsageMetrics() bool {
	if x != nil {
		return x.LogUsageMetrics
	}
	return false
}

type OracleConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled         *bool            `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	OracleDiscovery *OracleDiscovery `protobuf:"bytes,2,opt,name=oracle_discovery,json=oracleDiscovery,proto3" json:"oracle_discovery,omitempty"`
	OracleMetrics   *OracleMetrics   `protobuf:"bytes,3,opt,name=oracle_metrics,json=oracleMetrics,proto3" json:"oracle_metrics,omitempty"`
}

func (x *OracleConfiguration) Reset() {
	*x = OracleConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_configuration_configuration_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OracleConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleConfiguration) ProtoMessage() {}

func (x *OracleConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_protos_configuration_configuration_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OracleConfiguration.ProtoReflect.Descriptor instead.
func (*OracleConfiguration) Descriptor() ([]byte, []int) {
	return file_protos_configuration_configuration_proto_rawDescGZIP(), []int{3}
}

func (x *OracleConfiguration) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *OracleConfiguration) GetOracleDiscovery() *OracleDiscovery {
	if x != nil {
		return x.OracleDiscovery
	}
	return nil
}

func (x *OracleConfiguration) GetOracleMetrics() *OracleMetrics {
	if x != nil {
		return x.OracleMetrics
	}
	return nil
}

type OracleDiscovery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateFrequency *durationpb.Duration `protobuf:"bytes,1,opt,name=update_frequency,json=updateFrequency,proto3" json:"update_frequency,omitempty"`
	Enabled         *bool                `protobuf:"varint,2,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
}

func (x *OracleDiscovery) Reset() {
	*x = OracleDiscovery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_configuration_configuration_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OracleDiscovery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleDiscovery) ProtoMessage() {}

func (x *OracleDiscovery) ProtoReflect() protoreflect.Message {
	mi := &file_protos_configuration_configuration_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OracleDiscovery.ProtoReflect.Descriptor instead.
func (*OracleDiscovery) Descriptor() ([]byte, []int) {
	return file_protos_configuration_configuration_proto_rawDescGZIP(), []int{4}
}

func (x *OracleDiscovery) GetUpdateFrequency() *durationpb.Duration {
	if x != nil {
		return x.UpdateFrequency
	}
	return nil
}

func (x *OracleDiscovery) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

type OracleMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled              *bool                   `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	CollectionFrequency  *durationpb.Duration    `protobuf:"bytes,2,opt,name=collection_frequency,json=collectionFrequency,proto3" json:"collection_frequency,omitempty"`
	ConnectionParameters []*ConnectionParameters `protobuf:"bytes,3,rep,name=connection_parameters,json=connectionParameters,proto3" json:"connection_parameters,omitempty"`
	Queries              []*Query                `protobuf:"bytes,4,rep,name=queries,proto3" json:"queries,omitempty"`
	MaxExecutionThreads  int64                   `protobuf:"varint,5,opt,name=max_execution_threads,json=maxExecutionThreads,proto3" json:"max_execution_threads,omitempty"`
	QueryTimeout         *durationpb.Duration    `protobuf:"bytes,6,opt,name=query_timeout,json=queryTimeout,proto3" json:"query_timeout,omitempty"`
}

func (x *OracleMetrics) Reset() {
	*x = OracleMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_configuration_configuration_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OracleMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleMetrics) ProtoMessage() {}

func (x *OracleMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_protos_configuration_configuration_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OracleMetrics.ProtoReflect.Descriptor instead.
func (*OracleMetrics) Descriptor() ([]byte, []int) {
	return file_protos_configuration_configuration_proto_rawDescGZIP(), []int{5}
}

func (x *OracleMetrics) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *OracleMetrics) GetCollectionFrequency() *durationpb.Duration {
	if x != nil {
		return x.CollectionFrequency
	}
	return nil
}

func (x *OracleMetrics) GetConnectionParameters() []*ConnectionParameters {
	if x != nil {
		return x.ConnectionParameters
	}
	return nil
}

func (x *OracleMetrics) GetQueries() []*Query {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *OracleMetrics) GetMaxExecutionThreads() int64 {
	if x != nil {
		return x.MaxExecutionThreads
	}
	return 0
}

func (x *OracleMetrics) GetQueryTimeout() *durationpb.Duration {
	if x != nil {
		return x.QueryTimeout
	}
	return nil
}

type MySQLConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled              *bool                 `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	ConnectionParameters *ConnectionParameters `protobuf:"bytes,2,opt,name=connection_parameters,json=connectionParameters,proto3" json:"connection_parameters,omitempty"`
	// Min 10 mins, Max 6 hours, default 1 hour
	DbcenterCollectionFrequency *durationpb.Duration `protobuf:"bytes,3,opt,name=dbcenter_collection_frequency,json=dbcenterCollectionFrequency,proto3" json:"dbcenter_collection_frequency,omitempty"`
}

func (x *MySQLConfiguration) Reset() {
	*x = MySQLConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_configuration_configuration_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MySQLConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MySQLConfiguration) ProtoMessage() {}

func (x *MySQLConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_protos_configuration_configuration_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MySQLConfiguration.ProtoReflect.Descriptor instead.
func (*MySQLConfiguration) Descriptor() ([]byte, []int) {
	return file_protos_configuration_configuration_proto_rawDescGZIP(), []int{6}
}

func (x *MySQLConfiguration) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *MySQLConfiguration) GetConnectionParameters() *ConnectionParameters {
	if x != nil {
		return x.ConnectionParameters
	}
	return nil
}

func (x *MySQLConfiguration) GetDbcenterCollectionFrequency() *durationpb.Duration {
	if x != nil {
		return x.DbcenterCollectionFrequency
	}
	return nil
}

type OpenShiftConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled              *bool                 `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	ConnectionParameters *ConnectionParameters `protobuf:"bytes,2,opt,name=connection_parameters,json=connectionParameters,proto3" json:"connection_parameters,omitempty"`
}

func (x *OpenShiftConfiguration) Reset() {
	*x = OpenShiftConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_configuration_configuration_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenShiftConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenShiftConfiguration) ProtoMessage() {}

func (x *OpenShiftConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_protos_configuration_configuration_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenShiftConfiguration.ProtoReflect.Descriptor instead.
func (*OpenShiftConfiguration) Descriptor() ([]byte, []int) {
	return file_protos_configuration_configuration_proto_rawDescGZIP(), []int{7}
}

func (x *OpenShiftConfiguration) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *OpenShiftConfiguration) GetConnectionParameters() *ConnectionParameters {
	if x != nil {
		return x.ConnectionParameters
	}
	return nil
}

type CommonDiscovery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled             *bool                `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	CollectionFrequency *durationpb.Duration `protobuf:"bytes,2,opt,name=collection_frequency,json=collectionFrequency,proto3" json:"collection_frequency,omitempty"`
}

func (x *CommonDiscovery) Reset() {
	*x = CommonDiscovery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_configuration_configuration_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonDiscovery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonDiscovery) ProtoMessage() {}

func (x *CommonDiscovery) ProtoReflect() protoreflect.Message {
	mi := &file_protos_configuration_configuration_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonDiscovery.ProtoReflect.Descriptor instead.
func (*CommonDiscovery) Descriptor() ([]byte, []int) {
	return file_protos_configuration_configuration_proto_rawDescGZIP(), []int{8}
}

func (x *CommonDiscovery) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *CommonDiscovery) GetCollectionFrequency() *durationpb.Duration {
	if x != nil {
		return x.CollectionFrequency
	}
	return nil
}

type RedisConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled              *bool                 `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	ConnectionParameters *ConnectionParameters `protobuf:"bytes,2,opt,name=connection_parameters,json=connectionParameters,proto3" json:"connection_parameters,omitempty"`
}

func (x *RedisConfiguration) Reset() {
	*x = RedisConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_configuration_configuration_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisConfiguration) ProtoMessage() {}

func (x *RedisConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_protos_configuration_configuration_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisConfiguration.ProtoReflect.Descriptor instead.
func (*RedisConfiguration) Descriptor() ([]byte, []int) {
	return file_protos_configuration_configuration_proto_rawDescGZIP(), []int{9}
}

func (x *RedisConfiguration) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *RedisConfiguration) GetConnectionParameters() *ConnectionParameters {
	if x != nil {
		return x.ConnectionParameters
	}
	return nil
}

type PostgresConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled              *bool                 `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	ConnectionParameters *ConnectionParameters `protobuf:"bytes,2,opt,name=connection_parameters,json=connectionParameters,proto3" json:"connection_parameters,omitempty"`
	// Min 10 mins, Max 6 hours, default 1 hour
	DbcenterCollectionFrequency *durationpb.Duration `protobuf:"bytes,3,opt,name=dbcenter_collection_frequency,json=dbcenterCollectionFrequency,proto3" json:"dbcenter_collection_frequency,omitempty"`
}

func (x *PostgresConfiguration) Reset() {
	*x = PostgresConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_configuration_configuration_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostgresConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresConfiguration) ProtoMessage() {}

func (x *PostgresConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_protos_configuration_configuration_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresConfiguration.ProtoReflect.Descriptor instead.
func (*PostgresConfiguration) Descriptor() ([]byte, []int) {
	return file_protos_configuration_configuration_proto_rawDescGZIP(), []int{10}
}

func (x *PostgresConfiguration) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *PostgresConfiguration) GetConnectionParameters() *ConnectionParameters {
	if x != nil {
		return x.ConnectionParameters
	}
	return nil
}

func (x *PostgresConfiguration) GetDbcenterCollectionFrequency() *durationpb.Duration {
	if x != nil {
		return x.DbcenterCollectionFrequency
	}
	return nil
}

type MongoDBConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled              *bool                 `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	ConnectionParameters *ConnectionParameters `protobuf:"bytes,2,opt,name=connection_parameters,json=connectionParameters,proto3" json:"connection_parameters,omitempty"`
	// Min 10 mins, Max 6 hours, default 1 hour
	CollectionFrequency *durationpb.Duration `protobuf:"bytes,3,opt,name=collection_frequency,json=collectionFrequency,proto3" json:"collection_frequency,omitempty"`
}

func (x *MongoDBConfiguration) Reset() {
	*x = MongoDBConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_configuration_configuration_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongoDBConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoDBConfiguration) ProtoMessage() {}

func (x *MongoDBConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_protos_configuration_configuration_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoDBConfiguration.ProtoReflect.Descriptor instead.
func (*MongoDBConfiguration) Descriptor() ([]byte, []int) {
	return file_protos_configuration_configuration_proto_rawDescGZIP(), []int{11}
}

func (x *MongoDBConfiguration) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *MongoDBConfiguration) GetConnectionParameters() *ConnectionParameters {
	if x != nil {
		return x.ConnectionParameters
	}
	return nil
}

func (x *MongoDBConfiguration) GetCollectionFrequency() *durationpb.Duration {
	if x != nil {
		return x.CollectionFrequency
	}
	return nil
}

type SQLServerConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled                  *bool                                             `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	CollectionConfiguration  *SQLServerConfiguration_CollectionConfiguration   `protobuf:"bytes,2,opt,name=collection_configuration,json=collectionConfiguration,proto3" json:"collection_configuration,omitempty"`
	CredentialConfigurations []*SQLServerConfiguration_CredentialConfiguration `protobuf:"bytes,3,rep,name=credential_configurations,json=credentialConfigurations,proto3" json:"credential_configurations,omitempty"`
	// default timeout is 10s
	CollectionTimeout *durationpb.Duration `protobuf:"bytes,4,opt,name=collection_timeout,json=collectionTimeout,proto3" json:"collection_timeout,omitempty"`
	// default max_retries is 3
	MaxRetries int32 `protobuf:"varint,5,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"`
	// default retry_frequency is 3600s
	RetryFrequency *durationpb.Duration `protobuf:"bytes,6,opt,name=retry_frequency,json=retryFrequency,proto3" json:"retry_frequency,omitempty"`
	// default remote collection is false
	RemoteCollection bool `protobuf:"varint,7,opt,name=remote_collection,json=remoteCollection,proto3" json:"remote_collection,omitempty"`
}

func (x *SQLServerConfiguration) Reset() {
	*x = SQLServerConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_configuration_configuration_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLServerConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLServerConfiguration) ProtoMessage() {}

func (x *SQLServerConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_protos_configuration_configuration_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLServerConfiguration.ProtoReflect.Descriptor instead.
func (*SQLServerConfiguration) Descriptor() ([]byte, []int) {
	return file_protos_configuration_configuration_proto_rawDescGZIP(), []int{12}
}

func (x *SQLServerConfiguration) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *SQLServerConfiguration) GetCollectionConfiguration() *SQLServerConfiguration_CollectionConfiguration {
	if x != nil {
		return x.CollectionConfiguration
	}
	return nil
}

func (x *SQLServerConfiguration) GetCredentialConfigurations() []*SQLServerConfiguration_CredentialConfiguration {
	if x != nil {
		return x.CredentialConfigurations
	}
	return nil
}

func (x *SQLServerConfiguration) GetCollectionTimeout() *durationpb.Duration {
	if x != nil {
		return x.CollectionTimeout
	}
	return nil
}

func (x *SQLServerConfiguration) GetMaxRetries() int32 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

func (x *SQLServerConfiguration) GetRetryFrequency() *durationpb.Duration {
	if x != nil {
		return x.RetryFrequency
	}
	return nil
}

func (x *SQLServerConfiguration) GetRemoteCollection() bool {
	if x != nil {
		return x.RemoteCollection
	}
	return false
}

type ConnectionParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username    string     `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Secret      *SecretRef `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
	Host        string     `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	Port        int32      `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	ServiceName string     `protobuf:"bytes,5,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	Password    string     `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *ConnectionParameters) Reset() {
	*x = ConnectionParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_configuration_configuration_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionParameters) ProtoMessage() {}

func (x *ConnectionParameters) ProtoReflect() protoreflect.Message {
	mi := &file_protos_configuration_configuration_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionParameters.ProtoReflect.Descriptor instead.
func (*ConnectionParameters) Descriptor() ([]byte, []int) {
	return file_protos_configuration_configuration_proto_rawDescGZIP(), []int{13}
}

func (x *ConnectionParameters) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ConnectionParameters) GetSecret() *SecretRef {
	if x != nil {
		return x.Secret
	}
	return nil
}

func (x *ConnectionParameters) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ConnectionParameters) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ConnectionParameters) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ConnectionParameters) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type SecretRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The project whose Secret Manager data is being referenced.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Name of the secret in Cloud Secret Manager. Note: this is not the
	// resource name (e.g., projects/<project>/secrets/<secret>). It's
	// just the secret name, which is the last part of the resource name.
	SecretName string `protobuf:"bytes,2,opt,name=secret_name,json=secretName,proto3" json:"secret_name,omitempty"`
}

func (x *SecretRef) Reset() {
	*x = SecretRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_configuration_configuration_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretRef) ProtoMessage() {}

func (x *SecretRef) ProtoReflect() protoreflect.Message {
	mi := &file_protos_configuration_configuration_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretRef.ProtoReflect.Descriptor instead.
func (*SecretRef) Descriptor() ([]byte, []int) {
	return file_protos_configuration_configuration_proto_rawDescGZIP(), []int{14}
}

func (x *SecretRef) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *SecretRef) GetSecretName() string {
	if x != nil {
		return x.SecretName
	}
	return ""
}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Sql          string             `protobuf:"bytes,2,opt,name=sql,proto3" json:"sql,omitempty"`
	Columns      []*Column          `protobuf:"bytes,3,rep,name=columns,proto3" json:"columns,omitempty"`
	DatabaseRole Query_DatabaseRole `protobuf:"varint,4,opt,name=database_role,json=databaseRole,proto3,enum=workloadagent.protos.configuration.Query_DatabaseRole" json:"database_role,omitempty"`
	Disabled     *bool              `protobuf:"varint,5,opt,name=disabled,proto3,oneof" json:"disabled,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_configuration_configuration_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_protos_configuration_configuration_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_protos_configuration_configuration_proto_rawDescGZIP(), []int{15}
}

func (x *Query) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Query) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

func (x *Query) GetColumns() []*Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *Query) GetDatabaseRole() Query_DatabaseRole {
	if x != nil {
		return x.DatabaseRole
	}
	return Query_UNSPECIFIED
}

func (x *Query) GetDisabled() bool {
	if x != nil && x.Disabled != nil {
		return *x.Disabled
	}
	return false
}

type Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MetricType   MetricType `protobuf:"varint,2,opt,name=metric_type,json=metricType,proto3,enum=workloadagent.protos.configuration.MetricType" json:"metric_type,omitempty"`
	ValueType    ValueType  `protobuf:"varint,3,opt,name=value_type,json=valueType,proto3,enum=workloadagent.protos.configuration.ValueType" json:"value_type,omitempty"`
	NameOverride string     `protobuf:"bytes,4,opt,name=name_override,json=nameOverride,proto3" json:"name_override,omitempty"`
}

func (x *Column) Reset() {
	*x = Column{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_configuration_configuration_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Column) ProtoMessage() {}

func (x *Column) ProtoReflect() protoreflect.Message {
	mi := &file_protos_configuration_configuration_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Column.ProtoReflect.Descriptor instead.
func (*Column) Descriptor() ([]byte, []int) {
	return file_protos_configuration_configuration_proto_rawDescGZIP(), []int{16}
}

func (x *Column) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Column) GetMetricType() MetricType {
	if x != nil {
		return x.MetricType
	}
	return MetricType_METRIC_UNSPECIFIED
}

func (x *Column) GetValueType() ValueType {
	if x != nil {
		return x.ValueType
	}
	return ValueType_VALUE_UNSPECIFIED
}

func (x *Column) GetNameOverride() string {
	if x != nil {
		return x.NameOverride
	}
	return ""
}

type SQLServerConfiguration_CollectionConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// defaults to True
	// enables or disables guest os collection
	CollectGuestOsMetrics bool `protobuf:"varint,1,opt,name=collect_guest_os_metrics,json=collectGuestOsMetrics,proto3" json:"collect_guest_os_metrics,omitempty"`
	// defaults to True
	// enables or disables SQL Server collection
	CollectSqlMetrics bool `protobuf:"varint,2,opt,name=collect_sql_metrics,json=collectSqlMetrics,proto3" json:"collect_sql_metrics,omitempty"`
	// defaults to 3600s (1 hour)
	// collection frequency
	CollectionFrequency *durationpb.Duration `protobuf:"bytes,3,opt,name=collection_frequency,json=collectionFrequency,proto3" json:"collection_frequency,omitempty"`
	// defaults to 3600s (1 hour)
	// dbcenter metrics collection frequency
	DbcenterMetricsCollectionFrequency *durationpb.Duration `protobuf:"bytes,4,opt,name=dbcenter_metrics_collection_frequency,json=dbcenterMetricsCollectionFrequency,proto3" json:"dbcenter_metrics_collection_frequency,omitempty"`
}

func (x *SQLServerConfiguration_CollectionConfiguration) Reset() {
	*x = SQLServerConfiguration_CollectionConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_configuration_configuration_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLServerConfiguration_CollectionConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLServerConfiguration_CollectionConfiguration) ProtoMessage() {}

func (x *SQLServerConfiguration_CollectionConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_protos_configuration_configuration_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLServerConfiguration_CollectionConfiguration.ProtoReflect.Descriptor instead.
func (*SQLServerConfiguration_CollectionConfiguration) Descriptor() ([]byte, []int) {
	return file_protos_configuration_configuration_proto_rawDescGZIP(), []int{12, 0}
}

func (x *SQLServerConfiguration_CollectionConfiguration) GetCollectGuestOsMetrics() bool {
	if x != nil {
		return x.CollectGuestOsMetrics
	}
	return false
}

func (x *SQLServerConfiguration_CollectionConfiguration) GetCollectSqlMetrics() bool {
	if x != nil {
		return x.CollectSqlMetrics
	}
	return false
}

func (x *SQLServerConfiguration_CollectionConfiguration) GetCollectionFrequency() *durationpb.Duration {
	if x != nil {
		return x.CollectionFrequency
	}
	return nil
}

func (x *SQLServerConfiguration_CollectionConfiguration) GetDbcenterMetricsCollectionFrequency() *durationpb.Duration {
	if x != nil {
		return x.DbcenterMetricsCollectionFrequency
	}
	return nil
}

type SQLServerConfiguration_CredentialConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VmProperties         *CloudProperties        `protobuf:"bytes,1,opt,name=vm_properties,json=vmProperties,proto3" json:"vm_properties,omitempty"`
	ConnectionParameters []*ConnectionParameters `protobuf:"bytes,2,rep,name=connection_parameters,json=connectionParameters,proto3" json:"connection_parameters,omitempty"`
	// Types that are assignable to GuestConfigurations:
	//
	//	*SQLServerConfiguration_CredentialConfiguration_LocalCollection
	//	*SQLServerConfiguration_CredentialConfiguration_RemoteWin
	//	*SQLServerConfiguration_CredentialConfiguration_RemoteLinux
	GuestConfigurations isSQLServerConfiguration_CredentialConfiguration_GuestConfigurations `protobuf_oneof:"guest_configurations"`
}

func (x *SQLServerConfiguration_CredentialConfiguration) Reset() {
	*x = SQLServerConfiguration_CredentialConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_configuration_configuration_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLServerConfiguration_CredentialConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLServerConfiguration_CredentialConfiguration) ProtoMessage() {}

func (x *SQLServerConfiguration_CredentialConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_protos_configuration_configuration_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLServerConfiguration_CredentialConfiguration.ProtoReflect.Descriptor instead.
func (*SQLServerConfiguration_CredentialConfiguration) Descriptor() ([]byte, []int) {
	return file_protos_configuration_configuration_proto_rawDescGZIP(), []int{12, 1}
}

func (x *SQLServerConfiguration_CredentialConfiguration) GetVmProperties() *CloudProperties {
	if x != nil {
		return x.VmProperties
	}
	return nil
}

func (x *SQLServerConfiguration_CredentialConfiguration) GetConnectionParameters() []*ConnectionParameters {
	if x != nil {
		return x.ConnectionParameters
	}
	return nil
}

func (m *SQLServerConfiguration_CredentialConfiguration) GetGuestConfigurations() isSQLServerConfiguration_CredentialConfiguration_GuestConfigurations {
	if m != nil {
		return m.GuestConfigurations
	}
	return nil
}

func (x *SQLServerConfiguration_CredentialConfiguration) GetLocalCollection() bool {
	if x, ok := x.GetGuestConfigurations().(*SQLServerConfiguration_CredentialConfiguration_LocalCollection); ok {
		return x.LocalCollection
	}
	return false
}

func (x *SQLServerConfiguration_CredentialConfiguration) GetRemoteWin() *SQLServerConfiguration_CredentialConfiguration_GuestCredentialsRemoteWin {
	if x, ok := x.GetGuestConfigurations().(*SQLServerConfiguration_CredentialConfiguration_RemoteWin); ok {
		return x.RemoteWin
	}
	return nil
}

func (x *SQLServerConfiguration_CredentialConfiguration) GetRemoteLinux() *SQLServerConfiguration_CredentialConfiguration_GuestCredentialsRemoteLinux {
	if x, ok := x.GetGuestConfigurations().(*SQLServerConfiguration_CredentialConfiguration_RemoteLinux); ok {
		return x.RemoteLinux
	}
	return nil
}

type isSQLServerConfiguration_CredentialConfiguration_GuestConfigurations interface {
	isSQLServerConfiguration_CredentialConfiguration_GuestConfigurations()
}

type SQLServerConfiguration_CredentialConfiguration_LocalCollection struct {
	LocalCollection bool `protobuf:"varint,3,opt,name=local_collection,json=localCollection,proto3,oneof"`
}

type SQLServerConfiguration_CredentialConfiguration_RemoteWin struct {
	RemoteWin *SQLServerConfiguration_CredentialConfiguration_GuestCredentialsRemoteWin `protobuf:"bytes,4,opt,name=remote_win,json=remoteWin,proto3,oneof"`
}

type SQLServerConfiguration_CredentialConfiguration_RemoteLinux struct {
	RemoteLinux *SQLServerConfiguration_CredentialConfiguration_GuestCredentialsRemoteLinux `protobuf:"bytes,5,opt,name=remote_linux,json=remoteLinux,proto3,oneof"`
}

func (*SQLServerConfiguration_CredentialConfiguration_LocalCollection) isSQLServerConfiguration_CredentialConfiguration_GuestConfigurations() {
}

func (*SQLServerConfiguration_CredentialConfiguration_RemoteWin) isSQLServerConfiguration_CredentialConfiguration_GuestConfigurations() {
}

func (*SQLServerConfiguration_CredentialConfiguration_RemoteLinux) isSQLServerConfiguration_CredentialConfiguration_GuestConfigurations() {
}

type SQLServerConfiguration_CredentialConfiguration_GuestCredentialsRemoteWin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionParameters *ConnectionParameters `protobuf:"bytes,1,opt,name=connection_parameters,json=connectionParameters,proto3" json:"connection_parameters,omitempty"`
}

func (x *SQLServerConfiguration_CredentialConfiguration_GuestCredentialsRemoteWin) Reset() {
	*x = SQLServerConfiguration_CredentialConfiguration_GuestCredentialsRemoteWin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_configuration_configuration_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLServerConfiguration_CredentialConfiguration_GuestCredentialsRemoteWin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLServerConfiguration_CredentialConfiguration_GuestCredentialsRemoteWin) ProtoMessage() {}

func (x *SQLServerConfiguration_CredentialConfiguration_GuestCredentialsRemoteWin) ProtoReflect() protoreflect.Message {
	mi := &file_protos_configuration_configuration_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLServerConfiguration_CredentialConfiguration_GuestCredentialsRemoteWin.ProtoReflect.Descriptor instead.
func (*SQLServerConfiguration_CredentialConfiguration_GuestCredentialsRemoteWin) Descriptor() ([]byte, []int) {
	return file_protos_configuration_configuration_proto_rawDescGZIP(), []int{12, 1, 0}
}

func (x *SQLServerConfiguration_CredentialConfiguration_GuestCredentialsRemoteWin) GetConnectionParameters() *ConnectionParameters {
	if x != nil {
		return x.ConnectionParameters
	}
	return nil
}

type SQLServerConfiguration_CredentialConfiguration_GuestCredentialsRemoteLinux struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionParameters *ConnectionParameters `protobuf:"bytes,1,opt,name=connection_parameters,json=connectionParameters,proto3" json:"connection_parameters,omitempty"`
	// private key for linux remote collection
	LinuxSshPrivateKeyPath string `protobuf:"bytes,2,opt,name=linux_ssh_private_key_path,json=linuxSshPrivateKeyPath,proto3" json:"linux_ssh_private_key_path,omitempty"`
}

func (x *SQLServerConfiguration_CredentialConfiguration_GuestCredentialsRemoteLinux) Reset() {
	*x = SQLServerConfiguration_CredentialConfiguration_GuestCredentialsRemoteLinux{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_configuration_configuration_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLServerConfiguration_CredentialConfiguration_GuestCredentialsRemoteLinux) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLServerConfiguration_CredentialConfiguration_GuestCredentialsRemoteLinux) ProtoMessage() {}

func (x *SQLServerConfiguration_CredentialConfiguration_GuestCredentialsRemoteLinux) ProtoReflect() protoreflect.Message {
	mi := &file_protos_configuration_configuration_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLServerConfiguration_CredentialConfiguration_GuestCredentialsRemoteLinux.ProtoReflect.Descriptor instead.
func (*SQLServerConfiguration_CredentialConfiguration_GuestCredentialsRemoteLinux) Descriptor() ([]byte, []int) {
	return file_protos_configuration_configuration_proto_rawDescGZIP(), []int{12, 1, 1}
}

func (x *SQLServerConfiguration_CredentialConfiguration_GuestCredentialsRemoteLinux) GetConnectionParameters() *ConnectionParameters {
	if x != nil {
		return x.ConnectionParameters
	}
	return nil
}

func (x *SQLServerConfiguration_CredentialConfiguration_GuestCredentialsRemoteLinux) GetLinuxSshPrivateKeyPath() string {
	if x != nil {
		return x.LinuxSshPrivateKeyPath
	}
	return ""
}

var File_protos_configuration_configuration_proto protoreflect.FileDescriptor

var file_protos_configuration_configuration_proto_rawDesc = []byte{
	0x0a, 0x28, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x77, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x86,
	0x0b, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3a, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x57, 0x0a, 0x09,
	0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3a, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x67,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x6f, 0x5f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x6c,
	0x6f, 0x67, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x10,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x10,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x6a, 0x0a, 0x14,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x13, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x13, 0x6d, 0x79, 0x73, 0x71,
	0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x79, 0x53, 0x51, 0x4c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x6d,
	0x79, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x5e, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x12, 0x67, 0x0a, 0x13, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x72, 0x65, 0x64, 0x69, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x73, 0x0a, 0x17, 0x73, 0x71,
	0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x51, 0x4c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x73, 0x71, 0x6c, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x36, 0x0a, 0x17, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x64, 0x61, 0x74, 0x61, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x70, 0x0a, 0x16, 0x70, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x15, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x73, 0x0a, 0x17, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6e,
	0x0a, 0x16, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x44, 0x42, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x44,
	0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x46,
	0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x42,
	0x55, 0x47, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x74,
	0x6f, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x22, 0xce, 0x02, 0x0a, 0x0f, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x7a,
	0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x75,
	0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x76, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x5f, 0x6d, 0x62, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x62, 0x22, 0x6b, 0x0a, 0x0f, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x67,
	0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0xfa, 0x01, 0x0a, 0x13, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x10,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x0f, 0x6f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x58, 0x0a, 0x0e,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0d, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x0f, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x44, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xb0, 0x03, 0x0a, 0x0d, 0x4f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x14, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x6d, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x14, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x43, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61,
	0x78, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x3e,
	0x0a, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x8d, 0x02, 0x0a, 0x12, 0x4d,
	0x79, 0x53, 0x51, 0x4c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x6d, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x5d, 0x0a, 0x1d, 0x64, 0x62, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x1b, 0x64, 0x62, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xb2, 0x01, 0x0a, 0x16, 0x4f,
	0x70, 0x65, 0x6e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x6d, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x14, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22,
	0x8a, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x4c, 0x0a, 0x14, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xae, 0x01, 0x0a,
	0x12, 0x52, 0x65, 0x64, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x6d, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x14, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x90, 0x02,
	0x0a, 0x15, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x6d, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x14, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5d, 0x0a, 0x1d, 0x64, 0x62, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1b, 0x64, 0x62, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x22, 0xfe, 0x01, 0x0a, 0x14, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x44, 0x42, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x6d, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4c, 0x0a, 0x14, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x22, 0xaa, 0x0e, 0x0a, 0x16, 0x53, 0x51, 0x4c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x8d, 0x01, 0x0a, 0x18,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x51, 0x4c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x17, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8f, 0x01, 0x0a, 0x19,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x52, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x51, 0x4c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x18, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x48, 0x0a,
	0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61,
	0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2b, 0x0a, 0x11,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xbe, 0x02, 0x0a, 0x17, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x5f, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x47, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2e,
	0x0a, 0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x71, 0x6c, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x53, 0x71, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x4c,
	0x0a, 0x14, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x6c, 0x0a, 0x25,
	0x64, 0x62, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x22, 0x64, 0x62, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x1a, 0xa5, 0x07, 0x0a, 0x17, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x0d, 0x76, 0x6d, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x0c, 0x76, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x6d, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x2b, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8d, 0x01, 0x0a,
	0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x6c, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x51, 0x4c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x75, 0x65, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x69, 0x6e, 0x48,
	0x00, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x69, 0x6e, 0x12, 0x93, 0x01, 0x0a,
	0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x6e, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x51, 0x4c, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x75, 0x65, 0x73, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x69,
	0x6e, 0x75, 0x78, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x6e,
	0x75, 0x78, 0x1a, 0x8a, 0x01, 0x0a, 0x19, 0x47, 0x75, 0x65, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x69, 0x6e,
	0x12, 0x6d, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a,
	0xc8, 0x01, 0x0a, 0x1b, 0x47, 0x75, 0x65, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x12,
	0x6d, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3a,
	0x0a, 0x1a, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x5f, 0x73, 0x73, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x53, 0x73, 0x68, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x74, 0x68, 0x42, 0x16, 0x0a, 0x14, 0x67, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xe0,
	0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52,
	0x65, 0x66, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x22, 0x4b, 0x0a, 0x09, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x66, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc3,
	0x02, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x71, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x71, 0x6c, 0x12, 0x44,
	0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x12, 0x5b, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x22, 0x43, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x42, 0x59, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x42, 0x4f, 0x54, 0x48, 0x10, 0x03, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x22, 0xe0, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x2a, 0x5f, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x47, 0x41, 0x55, 0x47, 0x45, 0x10,
	0x02, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x43, 0x55, 0x4d, 0x55,
	0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x2a, 0x67, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x02, 0x12, 0x10, 0x0a,
	0x0c, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12,
	0x10, 0x0a, 0x0c, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10,
	0x04, 0x42, 0x43, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_configuration_configuration_proto_rawDescOnce sync.Once
	file_protos_configuration_configuration_proto_rawDescData = file_protos_configuration_configuration_proto_rawDesc
)

func file_protos_configuration_configuration_proto_rawDescGZIP() []byte {
	file_protos_configuration_configuration_proto_rawDescOnce.Do(func() {
		file_protos_configuration_configuration_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_configuration_configuration_proto_rawDescData)
	})
	return file_protos_configuration_configuration_proto_rawDescData
}

var file_protos_configuration_configuration_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_protos_configuration_configuration_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_protos_configuration_configuration_proto_goTypes = []interface{}{
	(MetricType)(0),                                        // 0: workloadagent.protos.configuration.MetricType
	(ValueType)(0),                                         // 1: workloadagent.protos.configuration.ValueType
	(Configuration_LogLevel)(0),                            // 2: workloadagent.protos.configuration.Configuration.LogLevel
	(Query_DatabaseRole)(0),                                // 3: workloadagent.protos.configuration.Query.DatabaseRole
	(*Configuration)(nil),                                  // 4: workloadagent.protos.configuration.Configuration
	(*CloudProperties)(nil),                                // 5: workloadagent.protos.configuration.CloudProperties
	(*AgentProperties)(nil),                                // 6: workloadagent.protos.configuration.AgentProperties
	(*OracleConfiguration)(nil),                            // 7: workloadagent.protos.configuration.OracleConfiguration
	(*OracleDiscovery)(nil),                                // 8: workloadagent.protos.configuration.OracleDiscovery
	(*OracleMetrics)(nil),                                  // 9: workloadagent.protos.configuration.OracleMetrics
	(*MySQLConfiguration)(nil),                             // 10: workloadagent.protos.configuration.MySQLConfiguration
	(*OpenShiftConfiguration)(nil),                         // 11: workloadagent.protos.configuration.OpenShiftConfiguration
	(*CommonDiscovery)(nil),                                // 12: workloadagent.protos.configuration.CommonDiscovery
	(*RedisConfiguration)(nil),                             // 13: workloadagent.protos.configuration.RedisConfiguration
	(*PostgresConfiguration)(nil),                          // 14: workloadagent.protos.configuration.PostgresConfiguration
	(*MongoDBConfiguration)(nil),                           // 15: workloadagent.protos.configuration.MongoDBConfiguration
	(*SQLServerConfiguration)(nil),                         // 16: workloadagent.protos.configuration.SQLServerConfiguration
	(*ConnectionParameters)(nil),                           // 17: workloadagent.protos.configuration.ConnectionParameters
	(*SecretRef)(nil),                                      // 18: workloadagent.protos.configuration.SecretRef
	(*Query)(nil),                                          // 19: workloadagent.protos.configuration.Query
	(*Column)(nil),                                         // 20: workloadagent.protos.configuration.Column
	(*SQLServerConfiguration_CollectionConfiguration)(nil), // 21: workloadagent.protos.configuration.SQLServerConfiguration.CollectionConfiguration
	(*SQLServerConfiguration_CredentialConfiguration)(nil), // 22: workloadagent.protos.configuration.SQLServerConfiguration.CredentialConfiguration
	(*SQLServerConfiguration_CredentialConfiguration_GuestCredentialsRemoteWin)(nil),   // 23: workloadagent.protos.configuration.SQLServerConfiguration.CredentialConfiguration.GuestCredentialsRemoteWin
	(*SQLServerConfiguration_CredentialConfiguration_GuestCredentialsRemoteLinux)(nil), // 24: workloadagent.protos.configuration.SQLServerConfiguration.CredentialConfiguration.GuestCredentialsRemoteLinux
	(*durationpb.Duration)(nil), // 25: google.protobuf.Duration
}
var file_protos_configuration_configuration_proto_depIdxs = []int32{
	2,  // 0: workloadagent.protos.configuration.Configuration.log_level:type_name -> workloadagent.protos.configuration.Configuration.LogLevel
	5,  // 1: workloadagent.protos.configuration.Configuration.cloud_properties:type_name -> workloadagent.protos.configuration.CloudProperties
	6,  // 2: workloadagent.protos.configuration.Configuration.agent_properties:type_name -> workloadagent.protos.configuration.AgentProperties
	7,  // 3: workloadagent.protos.configuration.Configuration.oracle_configuration:type_name -> workloadagent.protos.configuration.OracleConfiguration
	10, // 4: workloadagent.protos.configuration.Configuration.mysql_configuration:type_name -> workloadagent.protos.configuration.MySQLConfiguration
	12, // 5: workloadagent.protos.configuration.Configuration.common_discovery:type_name -> workloadagent.protos.configuration.CommonDiscovery
	13, // 6: workloadagent.protos.configuration.Configuration.redis_configuration:type_name -> workloadagent.protos.configuration.RedisConfiguration
	16, // 7: workloadagent.protos.configuration.Configuration.sqlserver_configuration:type_name -> workloadagent.protos.configuration.SQLServerConfiguration
	14, // 8: workloadagent.protos.configuration.Configuration.postgres_configuration:type_name -> workloadagent.protos.configuration.PostgresConfiguration
	11, // 9: workloadagent.protos.configuration.Configuration.openshift_configuration:type_name -> workloadagent.protos.configuration.OpenShiftConfiguration
	15, // 10: workloadagent.protos.configuration.Configuration.mongo_db_configuration:type_name -> workloadagent.protos.configuration.MongoDBConfiguration
	8,  // 11: workloadagent.protos.configuration.OracleConfiguration.oracle_discovery:type_name -> workloadagent.protos.configuration.OracleDiscovery
	9,  // 12: workloadagent.protos.configuration.OracleConfiguration.oracle_metrics:type_name -> workloadagent.protos.configuration.OracleMetrics
	25, // 13: workloadagent.protos.configuration.OracleDiscovery.update_frequency:type_name -> google.protobuf.Duration
	25, // 14: workloadagent.protos.configuration.OracleMetrics.collection_frequency:type_name -> google.protobuf.Duration
	17, // 15: workloadagent.protos.configuration.OracleMetrics.connection_parameters:type_name -> workloadagent.protos.configuration.ConnectionParameters
	19, // 16: workloadagent.protos.configuration.OracleMetrics.queries:type_name -> workloadagent.protos.configuration.Query
	25, // 17: workloadagent.protos.configuration.OracleMetrics.query_timeout:type_name -> google.protobuf.Duration
	17, // 18: workloadagent.protos.configuration.MySQLConfiguration.connection_parameters:type_name -> workloadagent.protos.configuration.ConnectionParameters
	25, // 19: workloadagent.protos.configuration.MySQLConfiguration.dbcenter_collection_frequency:type_name -> google.protobuf.Duration
	17, // 20: workloadagent.protos.configuration.OpenShiftConfiguration.connection_parameters:type_name -> workloadagent.protos.configuration.ConnectionParameters
	25, // 21: workloadagent.protos.configuration.CommonDiscovery.collection_frequency:type_name -> google.protobuf.Duration
	17, // 22: workloadagent.protos.configuration.RedisConfiguration.connection_parameters:type_name -> workloadagent.protos.configuration.ConnectionParameters
	17, // 23: workloadagent.protos.configuration.PostgresConfiguration.connection_parameters:type_name -> workloadagent.protos.configuration.ConnectionParameters
	25, // 24: workloadagent.protos.configuration.PostgresConfiguration.dbcenter_collection_frequency:type_name -> google.protobuf.Duration
	17, // 25: workloadagent.protos.configuration.MongoDBConfiguration.connection_parameters:type_name -> workloadagent.protos.configuration.ConnectionParameters
	25, // 26: workloadagent.protos.configuration.MongoDBConfiguration.collection_frequency:type_name -> google.protobuf.Duration
	21, // 27: workloadagent.protos.configuration.SQLServerConfiguration.collection_configuration:type_name -> workloadagent.protos.configuration.SQLServerConfiguration.CollectionConfiguration
	22, // 28: workloadagent.protos.configuration.SQLServerConfiguration.credential_configurations:type_name -> workloadagent.protos.configuration.SQLServerConfiguration.CredentialConfiguration
	25, // 29: workloadagent.protos.configuration.SQLServerConfiguration.collection_timeout:type_name -> google.protobuf.Duration
	25, // 30: workloadagent.protos.configuration.SQLServerConfiguration.retry_frequency:type_name -> google.protobuf.Duration
	18, // 31: workloadagent.protos.configuration.ConnectionParameters.secret:type_name -> workloadagent.protos.configuration.SecretRef
	20, // 32: workloadagent.protos.configuration.Query.columns:type_name -> workloadagent.protos.configuration.Column
	3,  // 33: workloadagent.protos.configuration.Query.database_role:type_name -> workloadagent.protos.configuration.Query.DatabaseRole
	0,  // 34: workloadagent.protos.configuration.Column.metric_type:type_name -> workloadagent.protos.configuration.MetricType
	1,  // 35: workloadagent.protos.configuration.Column.value_type:type_name -> workloadagent.protos.configuration.ValueType
	25, // 36: workloadagent.protos.configuration.SQLServerConfiguration.CollectionConfiguration.collection_frequency:type_name -> google.protobuf.Duration
	25, // 37: workloadagent.protos.configuration.SQLServerConfiguration.CollectionConfiguration.dbcenter_metrics_collection_frequency:type_name -> google.protobuf.Duration
	5,  // 38: workloadagent.protos.configuration.SQLServerConfiguration.CredentialConfiguration.vm_properties:type_name -> workloadagent.protos.configuration.CloudProperties
	17, // 39: workloadagent.protos.configuration.SQLServerConfiguration.CredentialConfiguration.connection_parameters:type_name -> workloadagent.protos.configuration.ConnectionParameters
	23, // 40: workloadagent.protos.configuration.SQLServerConfiguration.CredentialConfiguration.remote_win:type_name -> workloadagent.protos.configuration.SQLServerConfiguration.CredentialConfiguration.GuestCredentialsRemoteWin
	24, // 41: workloadagent.protos.configuration.SQLServerConfiguration.CredentialConfiguration.remote_linux:type_name -> workloadagent.protos.configuration.SQLServerConfiguration.CredentialConfiguration.GuestCredentialsRemoteLinux
	17, // 42: workloadagent.protos.configuration.SQLServerConfiguration.CredentialConfiguration.GuestCredentialsRemoteWin.connection_parameters:type_name -> workloadagent.protos.configuration.ConnectionParameters
	17, // 43: workloadagent.protos.configuration.SQLServerConfiguration.CredentialConfiguration.GuestCredentialsRemoteLinux.connection_parameters:type_name -> workloadagent.protos.configuration.ConnectionParameters
	44, // [44:44] is the sub-list for method output_type
	44, // [44:44] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_protos_configuration_configuration_proto_init() }
func file_protos_configuration_configuration_proto_init() {
	if File_protos_configuration_configuration_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_configuration_configuration_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_configuration_configuration_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_configuration_configuration_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_configuration_configuration_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OracleConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_configuration_configuration_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OracleDiscovery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_configuration_configuration_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OracleMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_configuration_configuration_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MySQLConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_configuration_configuration_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenShiftConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_configuration_configuration_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonDiscovery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_configuration_configuration_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedisConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_configuration_configuration_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostgresConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_configuration_configuration_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongoDBConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_configuration_configuration_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQLServerConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_configuration_configuration_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_configuration_configuration_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_configuration_configuration_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_configuration_configuration_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Column); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_configuration_configuration_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQLServerConfiguration_CollectionConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_configuration_configuration_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQLServerConfiguration_CredentialConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_configuration_configuration_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQLServerConfiguration_CredentialConfiguration_GuestCredentialsRemoteWin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_configuration_configuration_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQLServerConfiguration_CredentialConfiguration_GuestCredentialsRemoteLinux); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protos_configuration_configuration_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_protos_configuration_configuration_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_protos_configuration_configuration_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_protos_configuration_configuration_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_protos_configuration_configuration_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_protos_configuration_configuration_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_protos_configuration_configuration_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_protos_configuration_configuration_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_protos_configuration_configuration_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_protos_configuration_configuration_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_protos_configuration_configuration_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_protos_configuration_configuration_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_protos_configuration_configuration_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*SQLServerConfiguration_CredentialConfiguration_LocalCollection)(nil),
		(*SQLServerConfiguration_CredentialConfiguration_RemoteWin)(nil),
		(*SQLServerConfiguration_CredentialConfiguration_RemoteLinux)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_configuration_configuration_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_configuration_configuration_proto_goTypes,
		DependencyIndexes: file_protos_configuration_configuration_proto_depIdxs,
		EnumInfos:         file_protos_configuration_configuration_proto_enumTypes,
		MessageInfos:      file_protos_configuration_configuration_proto_msgTypes,
	}.Build()
	File_protos_configuration_configuration_proto = out.File
	file_protos_configuration_configuration_proto_rawDesc = nil
	file_protos_configuration_configuration_proto_goTypes = nil
	file_protos_configuration_configuration_proto_depIdxs = nil
}
